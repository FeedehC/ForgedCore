// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ClientPerformanceShared.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Blizzard.Telemetry.Wow.Client {

  /// <summary>Holder for reflection information generated from ClientPerformanceShared.proto</summary>
  public static partial class ClientPerformanceSharedReflection {

    #region Descriptor
    /// <summary>File descriptor for ClientPerformanceShared.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientPerformanceSharedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1DbGllbnRQZXJmb3JtYW5jZVNoYXJlZC5wcm90bxIdQmxpenphcmQuVGVs",
            "ZW1ldHJ5Lldvdy5DbGllbnQaGnRlbGVtZXRyeV9leHRlbnNpb25zLnByb3Rv",
            "GhJDbGllbnRTaGFyZWQucHJvdG8i9gIKFkNsaWVudEdyYXBoaWNzU2V0dGlu",
            "Z3MSDwoHcXVhbGl0eRgBIAEoBRIaChJ0ZXh0dXJlX3Jlc29sdXRpb24YAiAB",
            "KAUSFQoNc3BlbGxfZGVuc2l0eRgDIAEoBRIaChJwcm9qZWN0ZWRfdGV4dHVy",
            "ZXMYBCABKAUSFQoNdmlld19kaXN0YW5jZRgFIAEoBRIWCg5ncm91bmRfY2x1",
            "dHRlchgGIAEoBRIaChJlbnZpcm9ubWVudF9kZXRhaWwYByABKAUSFgoOc2hh",
            "ZG93X3F1YWxpdHkYCCABKAUSFQoNbGlxdWlkX2RldGFpbBgJIAEoBRIYChBw",
            "YXJ0aWNsZV9kZW5zaXR5GAogASgFEgwKBHNzYW8YCyABKAUSFQoNZGVwdGhf",
            "ZWZmZWN0cxgMIAEoBRIXCg9jb21wdXRlX2VmZmVjdHMYDSABKAUSFAoMb3V0",
            "bGluZV9tb2RlGA4gASgFEhQKDG1zYWFfcXVhbGl0eRgPIAEoBSLgAwoQQ2xp",
            "ZW50U3lzdGVtU3BlYxJECgplbmdpbmVfbG9nGAEgASgLMjAuQmxpenphcmQu",
            "VGVsZW1ldHJ5Lldvdy5DbGllbnQuQ2xpZW50RW5naW5lTG9nVjISTwoQY3Vy",
            "cmVudF9zZXR0aW5ncxgCIAEoCzI1LkJsaXp6YXJkLlRlbGVtZXRyeS5Xb3cu",
            "Q2xpZW50LkNsaWVudEdyYXBoaWNzU2V0dGluZ3MSTwoQZGVmYXVsdF9zZXR0",
            "aW5ncxgDIAEoCzI1LkJsaXp6YXJkLlRlbGVtZXRyeS5Xb3cuQ2xpZW50LkNs",
            "aWVudEdyYXBoaWNzU2V0dGluZ3MSEAoIZXhlX25hbWUYBCABKAkSGgoSYXNz",
            "ZXJ0aW9uc19lbmFibGVkGAUgASgIEhkKEWhhc19hZGRvbnNfbG9hZGVkGAYg",
            "ASgIEhcKD21heF9mcHNfc2V0dGluZxgHIAEoBRITCgt1c2VfbWF4X2ZwcxgI",
            "IAEoCBIiChptYXhfZnBzX2JhY2tncm91bmRfc2V0dGluZxgJIAEoBRIeChZ1",
            "c2VfbWF4X2Zwc19iYWNrZ3JvdW5kGAogASgIEhMKC3RleHRfbG9jYWxlGAsg",
            "ASgJEhQKDGF1ZGlvX2xvY2FsZRgMIAEoCQ=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Blizzard.Telemetry.TelemetryExtensionsReflection.Descriptor, global::Blizzard.Telemetry.Wow.Client.ClientSharedReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Blizzard.Telemetry.Wow.Client.ClientGraphicsSettings), global::Blizzard.Telemetry.Wow.Client.ClientGraphicsSettings.Parser, new[]{ "Quality", "TextureResolution", "SpellDensity", "ProjectedTextures", "ViewDistance", "GroundClutter", "EnvironmentDetail", "ShadowQuality", "LiquidDetail", "ParticleDensity", "Ssao", "DepthEffects", "ComputeEffects", "OutlineMode", "MsaaQuality" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Blizzard.Telemetry.Wow.Client.ClientSystemSpec), global::Blizzard.Telemetry.Wow.Client.ClientSystemSpec.Parser, new[]{ "EngineLog", "CurrentSettings", "DefaultSettings", "ExeName", "AssertionsEnabled", "HasAddonsLoaded", "MaxFpsSetting", "UseMaxFps", "MaxFpsBackgroundSetting", "UseMaxFpsBackground", "TextLocale", "AudioLocale" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientGraphicsSettings : pb::IMessage<ClientGraphicsSettings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientGraphicsSettings> _parser = new pb::MessageParser<ClientGraphicsSettings>(() => new ClientGraphicsSettings());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ClientGraphicsSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Blizzard.Telemetry.Wow.Client.ClientPerformanceSharedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientGraphicsSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientGraphicsSettings(ClientGraphicsSettings other) : this() {
      _hasBits0 = other._hasBits0;
      quality_ = other.quality_;
      textureResolution_ = other.textureResolution_;
      spellDensity_ = other.spellDensity_;
      projectedTextures_ = other.projectedTextures_;
      viewDistance_ = other.viewDistance_;
      groundClutter_ = other.groundClutter_;
      environmentDetail_ = other.environmentDetail_;
      shadowQuality_ = other.shadowQuality_;
      liquidDetail_ = other.liquidDetail_;
      particleDensity_ = other.particleDensity_;
      ssao_ = other.ssao_;
      depthEffects_ = other.depthEffects_;
      computeEffects_ = other.computeEffects_;
      outlineMode_ = other.outlineMode_;
      msaaQuality_ = other.msaaQuality_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientGraphicsSettings Clone() {
      return new ClientGraphicsSettings(this);
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 1;
    private readonly static int QualityDefaultValue = 0;

    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Quality {
      get { if ((_hasBits0 & 1) != 0) { return quality_; } else { return QualityDefaultValue; } }
      set {
        _hasBits0 |= 1;
        quality_ = value;
      }
    }
    /// <summary>Gets whether the "quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasQuality {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearQuality() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "texture_resolution" field.</summary>
    public const int TextureResolutionFieldNumber = 2;
    private readonly static int TextureResolutionDefaultValue = 0;

    private int textureResolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TextureResolution {
      get { if ((_hasBits0 & 2) != 0) { return textureResolution_; } else { return TextureResolutionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        textureResolution_ = value;
      }
    }
    /// <summary>Gets whether the "texture_resolution" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTextureResolution {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "texture_resolution" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTextureResolution() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "spell_density" field.</summary>
    public const int SpellDensityFieldNumber = 3;
    private readonly static int SpellDensityDefaultValue = 0;

    private int spellDensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellDensity {
      get { if ((_hasBits0 & 4) != 0) { return spellDensity_; } else { return SpellDensityDefaultValue; } }
      set {
        _hasBits0 |= 4;
        spellDensity_ = value;
      }
    }
    /// <summary>Gets whether the "spell_density" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpellDensity {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "spell_density" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpellDensity() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "projected_textures" field.</summary>
    public const int ProjectedTexturesFieldNumber = 4;
    private readonly static int ProjectedTexturesDefaultValue = 0;

    private int projectedTextures_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProjectedTextures {
      get { if ((_hasBits0 & 8) != 0) { return projectedTextures_; } else { return ProjectedTexturesDefaultValue; } }
      set {
        _hasBits0 |= 8;
        projectedTextures_ = value;
      }
    }
    /// <summary>Gets whether the "projected_textures" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProjectedTextures {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "projected_textures" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProjectedTextures() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "view_distance" field.</summary>
    public const int ViewDistanceFieldNumber = 5;
    private readonly static int ViewDistanceDefaultValue = 0;

    private int viewDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ViewDistance {
      get { if ((_hasBits0 & 16) != 0) { return viewDistance_; } else { return ViewDistanceDefaultValue; } }
      set {
        _hasBits0 |= 16;
        viewDistance_ = value;
      }
    }
    /// <summary>Gets whether the "view_distance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasViewDistance {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "view_distance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearViewDistance() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "ground_clutter" field.</summary>
    public const int GroundClutterFieldNumber = 6;
    private readonly static int GroundClutterDefaultValue = 0;

    private int groundClutter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GroundClutter {
      get { if ((_hasBits0 & 32) != 0) { return groundClutter_; } else { return GroundClutterDefaultValue; } }
      set {
        _hasBits0 |= 32;
        groundClutter_ = value;
      }
    }
    /// <summary>Gets whether the "ground_clutter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGroundClutter {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "ground_clutter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGroundClutter() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "environment_detail" field.</summary>
    public const int EnvironmentDetailFieldNumber = 7;
    private readonly static int EnvironmentDetailDefaultValue = 0;

    private int environmentDetail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EnvironmentDetail {
      get { if ((_hasBits0 & 64) != 0) { return environmentDetail_; } else { return EnvironmentDetailDefaultValue; } }
      set {
        _hasBits0 |= 64;
        environmentDetail_ = value;
      }
    }
    /// <summary>Gets whether the "environment_detail" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnvironmentDetail {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "environment_detail" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnvironmentDetail() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "shadow_quality" field.</summary>
    public const int ShadowQualityFieldNumber = 8;
    private readonly static int ShadowQualityDefaultValue = 0;

    private int shadowQuality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShadowQuality {
      get { if ((_hasBits0 & 128) != 0) { return shadowQuality_; } else { return ShadowQualityDefaultValue; } }
      set {
        _hasBits0 |= 128;
        shadowQuality_ = value;
      }
    }
    /// <summary>Gets whether the "shadow_quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShadowQuality {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "shadow_quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShadowQuality() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "liquid_detail" field.</summary>
    public const int LiquidDetailFieldNumber = 9;
    private readonly static int LiquidDetailDefaultValue = 0;

    private int liquidDetail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LiquidDetail {
      get { if ((_hasBits0 & 256) != 0) { return liquidDetail_; } else { return LiquidDetailDefaultValue; } }
      set {
        _hasBits0 |= 256;
        liquidDetail_ = value;
      }
    }
    /// <summary>Gets whether the "liquid_detail" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLiquidDetail {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "liquid_detail" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLiquidDetail() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "particle_density" field.</summary>
    public const int ParticleDensityFieldNumber = 10;
    private readonly static int ParticleDensityDefaultValue = 0;

    private int particleDensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParticleDensity {
      get { if ((_hasBits0 & 512) != 0) { return particleDensity_; } else { return ParticleDensityDefaultValue; } }
      set {
        _hasBits0 |= 512;
        particleDensity_ = value;
      }
    }
    /// <summary>Gets whether the "particle_density" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasParticleDensity {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "particle_density" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearParticleDensity() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "ssao" field.</summary>
    public const int SsaoFieldNumber = 11;
    private readonly static int SsaoDefaultValue = 0;

    private int ssao_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ssao {
      get { if ((_hasBits0 & 1024) != 0) { return ssao_; } else { return SsaoDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        ssao_ = value;
      }
    }
    /// <summary>Gets whether the "ssao" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSsao {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "ssao" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSsao() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "depth_effects" field.</summary>
    public const int DepthEffectsFieldNumber = 12;
    private readonly static int DepthEffectsDefaultValue = 0;

    private int depthEffects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DepthEffects {
      get { if ((_hasBits0 & 2048) != 0) { return depthEffects_; } else { return DepthEffectsDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        depthEffects_ = value;
      }
    }
    /// <summary>Gets whether the "depth_effects" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDepthEffects {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "depth_effects" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDepthEffects() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "compute_effects" field.</summary>
    public const int ComputeEffectsFieldNumber = 13;
    private readonly static int ComputeEffectsDefaultValue = 0;

    private int computeEffects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ComputeEffects {
      get { if ((_hasBits0 & 4096) != 0) { return computeEffects_; } else { return ComputeEffectsDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        computeEffects_ = value;
      }
    }
    /// <summary>Gets whether the "compute_effects" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasComputeEffects {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "compute_effects" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearComputeEffects() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "outline_mode" field.</summary>
    public const int OutlineModeFieldNumber = 14;
    private readonly static int OutlineModeDefaultValue = 0;

    private int outlineMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OutlineMode {
      get { if ((_hasBits0 & 8192) != 0) { return outlineMode_; } else { return OutlineModeDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        outlineMode_ = value;
      }
    }
    /// <summary>Gets whether the "outline_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutlineMode {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "outline_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutlineMode() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "msaa_quality" field.</summary>
    public const int MsaaQualityFieldNumber = 15;
    private readonly static int MsaaQualityDefaultValue = 0;

    private int msaaQuality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MsaaQuality {
      get { if ((_hasBits0 & 16384) != 0) { return msaaQuality_; } else { return MsaaQualityDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        msaaQuality_ = value;
      }
    }
    /// <summary>Gets whether the "msaa_quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMsaaQuality {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "msaa_quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMsaaQuality() {
      _hasBits0 &= ~16384;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ClientGraphicsSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ClientGraphicsSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Quality != other.Quality) return false;
      if (TextureResolution != other.TextureResolution) return false;
      if (SpellDensity != other.SpellDensity) return false;
      if (ProjectedTextures != other.ProjectedTextures) return false;
      if (ViewDistance != other.ViewDistance) return false;
      if (GroundClutter != other.GroundClutter) return false;
      if (EnvironmentDetail != other.EnvironmentDetail) return false;
      if (ShadowQuality != other.ShadowQuality) return false;
      if (LiquidDetail != other.LiquidDetail) return false;
      if (ParticleDensity != other.ParticleDensity) return false;
      if (Ssao != other.Ssao) return false;
      if (DepthEffects != other.DepthEffects) return false;
      if (ComputeEffects != other.ComputeEffects) return false;
      if (OutlineMode != other.OutlineMode) return false;
      if (MsaaQuality != other.MsaaQuality) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuality) hash ^= Quality.GetHashCode();
      if (HasTextureResolution) hash ^= TextureResolution.GetHashCode();
      if (HasSpellDensity) hash ^= SpellDensity.GetHashCode();
      if (HasProjectedTextures) hash ^= ProjectedTextures.GetHashCode();
      if (HasViewDistance) hash ^= ViewDistance.GetHashCode();
      if (HasGroundClutter) hash ^= GroundClutter.GetHashCode();
      if (HasEnvironmentDetail) hash ^= EnvironmentDetail.GetHashCode();
      if (HasShadowQuality) hash ^= ShadowQuality.GetHashCode();
      if (HasLiquidDetail) hash ^= LiquidDetail.GetHashCode();
      if (HasParticleDensity) hash ^= ParticleDensity.GetHashCode();
      if (HasSsao) hash ^= Ssao.GetHashCode();
      if (HasDepthEffects) hash ^= DepthEffects.GetHashCode();
      if (HasComputeEffects) hash ^= ComputeEffects.GetHashCode();
      if (HasOutlineMode) hash ^= OutlineMode.GetHashCode();
      if (HasMsaaQuality) hash ^= MsaaQuality.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuality) {
        output.WriteRawTag(8);
        output.WriteInt32(Quality);
      }
      if (HasTextureResolution) {
        output.WriteRawTag(16);
        output.WriteInt32(TextureResolution);
      }
      if (HasSpellDensity) {
        output.WriteRawTag(24);
        output.WriteInt32(SpellDensity);
      }
      if (HasProjectedTextures) {
        output.WriteRawTag(32);
        output.WriteInt32(ProjectedTextures);
      }
      if (HasViewDistance) {
        output.WriteRawTag(40);
        output.WriteInt32(ViewDistance);
      }
      if (HasGroundClutter) {
        output.WriteRawTag(48);
        output.WriteInt32(GroundClutter);
      }
      if (HasEnvironmentDetail) {
        output.WriteRawTag(56);
        output.WriteInt32(EnvironmentDetail);
      }
      if (HasShadowQuality) {
        output.WriteRawTag(64);
        output.WriteInt32(ShadowQuality);
      }
      if (HasLiquidDetail) {
        output.WriteRawTag(72);
        output.WriteInt32(LiquidDetail);
      }
      if (HasParticleDensity) {
        output.WriteRawTag(80);
        output.WriteInt32(ParticleDensity);
      }
      if (HasSsao) {
        output.WriteRawTag(88);
        output.WriteInt32(Ssao);
      }
      if (HasDepthEffects) {
        output.WriteRawTag(96);
        output.WriteInt32(DepthEffects);
      }
      if (HasComputeEffects) {
        output.WriteRawTag(104);
        output.WriteInt32(ComputeEffects);
      }
      if (HasOutlineMode) {
        output.WriteRawTag(112);
        output.WriteInt32(OutlineMode);
      }
      if (HasMsaaQuality) {
        output.WriteRawTag(120);
        output.WriteInt32(MsaaQuality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuality) {
        output.WriteRawTag(8);
        output.WriteInt32(Quality);
      }
      if (HasTextureResolution) {
        output.WriteRawTag(16);
        output.WriteInt32(TextureResolution);
      }
      if (HasSpellDensity) {
        output.WriteRawTag(24);
        output.WriteInt32(SpellDensity);
      }
      if (HasProjectedTextures) {
        output.WriteRawTag(32);
        output.WriteInt32(ProjectedTextures);
      }
      if (HasViewDistance) {
        output.WriteRawTag(40);
        output.WriteInt32(ViewDistance);
      }
      if (HasGroundClutter) {
        output.WriteRawTag(48);
        output.WriteInt32(GroundClutter);
      }
      if (HasEnvironmentDetail) {
        output.WriteRawTag(56);
        output.WriteInt32(EnvironmentDetail);
      }
      if (HasShadowQuality) {
        output.WriteRawTag(64);
        output.WriteInt32(ShadowQuality);
      }
      if (HasLiquidDetail) {
        output.WriteRawTag(72);
        output.WriteInt32(LiquidDetail);
      }
      if (HasParticleDensity) {
        output.WriteRawTag(80);
        output.WriteInt32(ParticleDensity);
      }
      if (HasSsao) {
        output.WriteRawTag(88);
        output.WriteInt32(Ssao);
      }
      if (HasDepthEffects) {
        output.WriteRawTag(96);
        output.WriteInt32(DepthEffects);
      }
      if (HasComputeEffects) {
        output.WriteRawTag(104);
        output.WriteInt32(ComputeEffects);
      }
      if (HasOutlineMode) {
        output.WriteRawTag(112);
        output.WriteInt32(OutlineMode);
      }
      if (HasMsaaQuality) {
        output.WriteRawTag(120);
        output.WriteInt32(MsaaQuality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasQuality) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (HasTextureResolution) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TextureResolution);
      }
      if (HasSpellDensity) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpellDensity);
      }
      if (HasProjectedTextures) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProjectedTextures);
      }
      if (HasViewDistance) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ViewDistance);
      }
      if (HasGroundClutter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroundClutter);
      }
      if (HasEnvironmentDetail) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnvironmentDetail);
      }
      if (HasShadowQuality) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShadowQuality);
      }
      if (HasLiquidDetail) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LiquidDetail);
      }
      if (HasParticleDensity) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParticleDensity);
      }
      if (HasSsao) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ssao);
      }
      if (HasDepthEffects) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DepthEffects);
      }
      if (HasComputeEffects) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComputeEffects);
      }
      if (HasOutlineMode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutlineMode);
      }
      if (HasMsaaQuality) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsaaQuality);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ClientGraphicsSettings other) {
      if (other == null) {
        return;
      }
      if (other.HasQuality) {
        Quality = other.Quality;
      }
      if (other.HasTextureResolution) {
        TextureResolution = other.TextureResolution;
      }
      if (other.HasSpellDensity) {
        SpellDensity = other.SpellDensity;
      }
      if (other.HasProjectedTextures) {
        ProjectedTextures = other.ProjectedTextures;
      }
      if (other.HasViewDistance) {
        ViewDistance = other.ViewDistance;
      }
      if (other.HasGroundClutter) {
        GroundClutter = other.GroundClutter;
      }
      if (other.HasEnvironmentDetail) {
        EnvironmentDetail = other.EnvironmentDetail;
      }
      if (other.HasShadowQuality) {
        ShadowQuality = other.ShadowQuality;
      }
      if (other.HasLiquidDetail) {
        LiquidDetail = other.LiquidDetail;
      }
      if (other.HasParticleDensity) {
        ParticleDensity = other.ParticleDensity;
      }
      if (other.HasSsao) {
        Ssao = other.Ssao;
      }
      if (other.HasDepthEffects) {
        DepthEffects = other.DepthEffects;
      }
      if (other.HasComputeEffects) {
        ComputeEffects = other.ComputeEffects;
      }
      if (other.HasOutlineMode) {
        OutlineMode = other.OutlineMode;
      }
      if (other.HasMsaaQuality) {
        MsaaQuality = other.MsaaQuality;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Quality = input.ReadInt32();
            break;
          }
          case 16: {
            TextureResolution = input.ReadInt32();
            break;
          }
          case 24: {
            SpellDensity = input.ReadInt32();
            break;
          }
          case 32: {
            ProjectedTextures = input.ReadInt32();
            break;
          }
          case 40: {
            ViewDistance = input.ReadInt32();
            break;
          }
          case 48: {
            GroundClutter = input.ReadInt32();
            break;
          }
          case 56: {
            EnvironmentDetail = input.ReadInt32();
            break;
          }
          case 64: {
            ShadowQuality = input.ReadInt32();
            break;
          }
          case 72: {
            LiquidDetail = input.ReadInt32();
            break;
          }
          case 80: {
            ParticleDensity = input.ReadInt32();
            break;
          }
          case 88: {
            Ssao = input.ReadInt32();
            break;
          }
          case 96: {
            DepthEffects = input.ReadInt32();
            break;
          }
          case 104: {
            ComputeEffects = input.ReadInt32();
            break;
          }
          case 112: {
            OutlineMode = input.ReadInt32();
            break;
          }
          case 120: {
            MsaaQuality = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Quality = input.ReadInt32();
            break;
          }
          case 16: {
            TextureResolution = input.ReadInt32();
            break;
          }
          case 24: {
            SpellDensity = input.ReadInt32();
            break;
          }
          case 32: {
            ProjectedTextures = input.ReadInt32();
            break;
          }
          case 40: {
            ViewDistance = input.ReadInt32();
            break;
          }
          case 48: {
            GroundClutter = input.ReadInt32();
            break;
          }
          case 56: {
            EnvironmentDetail = input.ReadInt32();
            break;
          }
          case 64: {
            ShadowQuality = input.ReadInt32();
            break;
          }
          case 72: {
            LiquidDetail = input.ReadInt32();
            break;
          }
          case 80: {
            ParticleDensity = input.ReadInt32();
            break;
          }
          case 88: {
            Ssao = input.ReadInt32();
            break;
          }
          case 96: {
            DepthEffects = input.ReadInt32();
            break;
          }
          case 104: {
            ComputeEffects = input.ReadInt32();
            break;
          }
          case 112: {
            OutlineMode = input.ReadInt32();
            break;
          }
          case 120: {
            MsaaQuality = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ClientSystemSpec : pb::IMessage<ClientSystemSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientSystemSpec> _parser = new pb::MessageParser<ClientSystemSpec>(() => new ClientSystemSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ClientSystemSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Blizzard.Telemetry.Wow.Client.ClientPerformanceSharedReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientSystemSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientSystemSpec(ClientSystemSpec other) : this() {
      _hasBits0 = other._hasBits0;
      engineLog_ = other.engineLog_ != null ? other.engineLog_.Clone() : null;
      currentSettings_ = other.currentSettings_ != null ? other.currentSettings_.Clone() : null;
      defaultSettings_ = other.defaultSettings_ != null ? other.defaultSettings_.Clone() : null;
      exeName_ = other.exeName_;
      assertionsEnabled_ = other.assertionsEnabled_;
      hasAddonsLoaded_ = other.hasAddonsLoaded_;
      maxFpsSetting_ = other.maxFpsSetting_;
      useMaxFps_ = other.useMaxFps_;
      maxFpsBackgroundSetting_ = other.maxFpsBackgroundSetting_;
      useMaxFpsBackground_ = other.useMaxFpsBackground_;
      textLocale_ = other.textLocale_;
      audioLocale_ = other.audioLocale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientSystemSpec Clone() {
      return new ClientSystemSpec(this);
    }

    /// <summary>Field number for the "engine_log" field.</summary>
    public const int EngineLogFieldNumber = 1;
    private global::Blizzard.Telemetry.Wow.Client.ClientEngineLogV2 engineLog_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blizzard.Telemetry.Wow.Client.ClientEngineLogV2 EngineLog {
      get { return engineLog_; }
      set {
        engineLog_ = value;
      }
    }

    /// <summary>Field number for the "current_settings" field.</summary>
    public const int CurrentSettingsFieldNumber = 2;
    private global::Blizzard.Telemetry.Wow.Client.ClientGraphicsSettings currentSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blizzard.Telemetry.Wow.Client.ClientGraphicsSettings CurrentSettings {
      get { return currentSettings_; }
      set {
        currentSettings_ = value;
      }
    }

    /// <summary>Field number for the "default_settings" field.</summary>
    public const int DefaultSettingsFieldNumber = 3;
    private global::Blizzard.Telemetry.Wow.Client.ClientGraphicsSettings defaultSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blizzard.Telemetry.Wow.Client.ClientGraphicsSettings DefaultSettings {
      get { return defaultSettings_; }
      set {
        defaultSettings_ = value;
      }
    }

    /// <summary>Field number for the "exe_name" field.</summary>
    public const int ExeNameFieldNumber = 4;
    private readonly static string ExeNameDefaultValue = "";

    private string exeName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExeName {
      get { return exeName_ ?? ExeNameDefaultValue; }
      set {
        exeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "exe_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExeName {
      get { return exeName_ != null; }
    }
    /// <summary>Clears the value of the "exe_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExeName() {
      exeName_ = null;
    }

    /// <summary>Field number for the "assertions_enabled" field.</summary>
    public const int AssertionsEnabledFieldNumber = 5;
    private readonly static bool AssertionsEnabledDefaultValue = false;

    private bool assertionsEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AssertionsEnabled {
      get { if ((_hasBits0 & 1) != 0) { return assertionsEnabled_; } else { return AssertionsEnabledDefaultValue; } }
      set {
        _hasBits0 |= 1;
        assertionsEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "assertions_enabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAssertionsEnabled {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "assertions_enabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAssertionsEnabled() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "has_addons_loaded" field.</summary>
    public const int HasAddonsLoadedFieldNumber = 6;
    private readonly static bool HasAddonsLoadedDefaultValue = false;

    private bool hasAddonsLoaded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddonsLoaded {
      get { if ((_hasBits0 & 2) != 0) { return hasAddonsLoaded_; } else { return HasAddonsLoadedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        hasAddonsLoaded_ = value;
      }
    }
    /// <summary>Gets whether the "has_addons_loaded" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasAddonsLoaded {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "has_addons_loaded" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasAddonsLoaded() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "max_fps_setting" field.</summary>
    public const int MaxFpsSettingFieldNumber = 7;
    private readonly static int MaxFpsSettingDefaultValue = 0;

    private int maxFpsSetting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxFpsSetting {
      get { if ((_hasBits0 & 4) != 0) { return maxFpsSetting_; } else { return MaxFpsSettingDefaultValue; } }
      set {
        _hasBits0 |= 4;
        maxFpsSetting_ = value;
      }
    }
    /// <summary>Gets whether the "max_fps_setting" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxFpsSetting {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "max_fps_setting" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxFpsSetting() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "use_max_fps" field.</summary>
    public const int UseMaxFpsFieldNumber = 8;
    private readonly static bool UseMaxFpsDefaultValue = false;

    private bool useMaxFps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseMaxFps {
      get { if ((_hasBits0 & 8) != 0) { return useMaxFps_; } else { return UseMaxFpsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        useMaxFps_ = value;
      }
    }
    /// <summary>Gets whether the "use_max_fps" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseMaxFps {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "use_max_fps" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseMaxFps() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "max_fps_background_setting" field.</summary>
    public const int MaxFpsBackgroundSettingFieldNumber = 9;
    private readonly static int MaxFpsBackgroundSettingDefaultValue = 0;

    private int maxFpsBackgroundSetting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxFpsBackgroundSetting {
      get { if ((_hasBits0 & 16) != 0) { return maxFpsBackgroundSetting_; } else { return MaxFpsBackgroundSettingDefaultValue; } }
      set {
        _hasBits0 |= 16;
        maxFpsBackgroundSetting_ = value;
      }
    }
    /// <summary>Gets whether the "max_fps_background_setting" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxFpsBackgroundSetting {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "max_fps_background_setting" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxFpsBackgroundSetting() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "use_max_fps_background" field.</summary>
    public const int UseMaxFpsBackgroundFieldNumber = 10;
    private readonly static bool UseMaxFpsBackgroundDefaultValue = false;

    private bool useMaxFpsBackground_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseMaxFpsBackground {
      get { if ((_hasBits0 & 32) != 0) { return useMaxFpsBackground_; } else { return UseMaxFpsBackgroundDefaultValue; } }
      set {
        _hasBits0 |= 32;
        useMaxFpsBackground_ = value;
      }
    }
    /// <summary>Gets whether the "use_max_fps_background" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseMaxFpsBackground {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "use_max_fps_background" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseMaxFpsBackground() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "text_locale" field.</summary>
    public const int TextLocaleFieldNumber = 11;
    private readonly static string TextLocaleDefaultValue = "";

    private string textLocale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TextLocale {
      get { return textLocale_ ?? TextLocaleDefaultValue; }
      set {
        textLocale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text_locale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTextLocale {
      get { return textLocale_ != null; }
    }
    /// <summary>Clears the value of the "text_locale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTextLocale() {
      textLocale_ = null;
    }

    /// <summary>Field number for the "audio_locale" field.</summary>
    public const int AudioLocaleFieldNumber = 12;
    private readonly static string AudioLocaleDefaultValue = "";

    private string audioLocale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AudioLocale {
      get { return audioLocale_ ?? AudioLocaleDefaultValue; }
      set {
        audioLocale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "audio_locale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAudioLocale {
      get { return audioLocale_ != null; }
    }
    /// <summary>Clears the value of the "audio_locale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAudioLocale() {
      audioLocale_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ClientSystemSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ClientSystemSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EngineLog, other.EngineLog)) return false;
      if (!object.Equals(CurrentSettings, other.CurrentSettings)) return false;
      if (!object.Equals(DefaultSettings, other.DefaultSettings)) return false;
      if (ExeName != other.ExeName) return false;
      if (AssertionsEnabled != other.AssertionsEnabled) return false;
      if (HasAddonsLoaded != other.HasAddonsLoaded) return false;
      if (MaxFpsSetting != other.MaxFpsSetting) return false;
      if (UseMaxFps != other.UseMaxFps) return false;
      if (MaxFpsBackgroundSetting != other.MaxFpsBackgroundSetting) return false;
      if (UseMaxFpsBackground != other.UseMaxFpsBackground) return false;
      if (TextLocale != other.TextLocale) return false;
      if (AudioLocale != other.AudioLocale) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (engineLog_ != null) hash ^= EngineLog.GetHashCode();
      if (currentSettings_ != null) hash ^= CurrentSettings.GetHashCode();
      if (defaultSettings_ != null) hash ^= DefaultSettings.GetHashCode();
      if (HasExeName) hash ^= ExeName.GetHashCode();
      if (HasAssertionsEnabled) hash ^= AssertionsEnabled.GetHashCode();
      if (HasHasAddonsLoaded) hash ^= HasAddonsLoaded.GetHashCode();
      if (HasMaxFpsSetting) hash ^= MaxFpsSetting.GetHashCode();
      if (HasUseMaxFps) hash ^= UseMaxFps.GetHashCode();
      if (HasMaxFpsBackgroundSetting) hash ^= MaxFpsBackgroundSetting.GetHashCode();
      if (HasUseMaxFpsBackground) hash ^= UseMaxFpsBackground.GetHashCode();
      if (HasTextLocale) hash ^= TextLocale.GetHashCode();
      if (HasAudioLocale) hash ^= AudioLocale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (engineLog_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EngineLog);
      }
      if (currentSettings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CurrentSettings);
      }
      if (defaultSettings_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultSettings);
      }
      if (HasExeName) {
        output.WriteRawTag(34);
        output.WriteString(ExeName);
      }
      if (HasAssertionsEnabled) {
        output.WriteRawTag(40);
        output.WriteBool(AssertionsEnabled);
      }
      if (HasHasAddonsLoaded) {
        output.WriteRawTag(48);
        output.WriteBool(HasAddonsLoaded);
      }
      if (HasMaxFpsSetting) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxFpsSetting);
      }
      if (HasUseMaxFps) {
        output.WriteRawTag(64);
        output.WriteBool(UseMaxFps);
      }
      if (HasMaxFpsBackgroundSetting) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxFpsBackgroundSetting);
      }
      if (HasUseMaxFpsBackground) {
        output.WriteRawTag(80);
        output.WriteBool(UseMaxFpsBackground);
      }
      if (HasTextLocale) {
        output.WriteRawTag(90);
        output.WriteString(TextLocale);
      }
      if (HasAudioLocale) {
        output.WriteRawTag(98);
        output.WriteString(AudioLocale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (engineLog_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EngineLog);
      }
      if (currentSettings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CurrentSettings);
      }
      if (defaultSettings_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultSettings);
      }
      if (HasExeName) {
        output.WriteRawTag(34);
        output.WriteString(ExeName);
      }
      if (HasAssertionsEnabled) {
        output.WriteRawTag(40);
        output.WriteBool(AssertionsEnabled);
      }
      if (HasHasAddonsLoaded) {
        output.WriteRawTag(48);
        output.WriteBool(HasAddonsLoaded);
      }
      if (HasMaxFpsSetting) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxFpsSetting);
      }
      if (HasUseMaxFps) {
        output.WriteRawTag(64);
        output.WriteBool(UseMaxFps);
      }
      if (HasMaxFpsBackgroundSetting) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxFpsBackgroundSetting);
      }
      if (HasUseMaxFpsBackground) {
        output.WriteRawTag(80);
        output.WriteBool(UseMaxFpsBackground);
      }
      if (HasTextLocale) {
        output.WriteRawTag(90);
        output.WriteString(TextLocale);
      }
      if (HasAudioLocale) {
        output.WriteRawTag(98);
        output.WriteString(AudioLocale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (engineLog_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EngineLog);
      }
      if (currentSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentSettings);
      }
      if (defaultSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultSettings);
      }
      if (HasExeName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExeName);
      }
      if (HasAssertionsEnabled) {
        size += 1 + 1;
      }
      if (HasHasAddonsLoaded) {
        size += 1 + 1;
      }
      if (HasMaxFpsSetting) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFpsSetting);
      }
      if (HasUseMaxFps) {
        size += 1 + 1;
      }
      if (HasMaxFpsBackgroundSetting) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFpsBackgroundSetting);
      }
      if (HasUseMaxFpsBackground) {
        size += 1 + 1;
      }
      if (HasTextLocale) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextLocale);
      }
      if (HasAudioLocale) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AudioLocale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ClientSystemSpec other) {
      if (other == null) {
        return;
      }
      if (other.engineLog_ != null) {
        if (engineLog_ == null) {
          EngineLog = new global::Blizzard.Telemetry.Wow.Client.ClientEngineLogV2();
        }
        EngineLog.MergeFrom(other.EngineLog);
      }
      if (other.currentSettings_ != null) {
        if (currentSettings_ == null) {
          CurrentSettings = new global::Blizzard.Telemetry.Wow.Client.ClientGraphicsSettings();
        }
        CurrentSettings.MergeFrom(other.CurrentSettings);
      }
      if (other.defaultSettings_ != null) {
        if (defaultSettings_ == null) {
          DefaultSettings = new global::Blizzard.Telemetry.Wow.Client.ClientGraphicsSettings();
        }
        DefaultSettings.MergeFrom(other.DefaultSettings);
      }
      if (other.HasExeName) {
        ExeName = other.ExeName;
      }
      if (other.HasAssertionsEnabled) {
        AssertionsEnabled = other.AssertionsEnabled;
      }
      if (other.HasHasAddonsLoaded) {
        HasAddonsLoaded = other.HasAddonsLoaded;
      }
      if (other.HasMaxFpsSetting) {
        MaxFpsSetting = other.MaxFpsSetting;
      }
      if (other.HasUseMaxFps) {
        UseMaxFps = other.UseMaxFps;
      }
      if (other.HasMaxFpsBackgroundSetting) {
        MaxFpsBackgroundSetting = other.MaxFpsBackgroundSetting;
      }
      if (other.HasUseMaxFpsBackground) {
        UseMaxFpsBackground = other.UseMaxFpsBackground;
      }
      if (other.HasTextLocale) {
        TextLocale = other.TextLocale;
      }
      if (other.HasAudioLocale) {
        AudioLocale = other.AudioLocale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (engineLog_ == null) {
              EngineLog = new global::Blizzard.Telemetry.Wow.Client.ClientEngineLogV2();
            }
            input.ReadMessage(EngineLog);
            break;
          }
          case 18: {
            if (currentSettings_ == null) {
              CurrentSettings = new global::Blizzard.Telemetry.Wow.Client.ClientGraphicsSettings();
            }
            input.ReadMessage(CurrentSettings);
            break;
          }
          case 26: {
            if (defaultSettings_ == null) {
              DefaultSettings = new global::Blizzard.Telemetry.Wow.Client.ClientGraphicsSettings();
            }
            input.ReadMessage(DefaultSettings);
            break;
          }
          case 34: {
            ExeName = input.ReadString();
            break;
          }
          case 40: {
            AssertionsEnabled = input.ReadBool();
            break;
          }
          case 48: {
            HasAddonsLoaded = input.ReadBool();
            break;
          }
          case 56: {
            MaxFpsSetting = input.ReadInt32();
            break;
          }
          case 64: {
            UseMaxFps = input.ReadBool();
            break;
          }
          case 72: {
            MaxFpsBackgroundSetting = input.ReadInt32();
            break;
          }
          case 80: {
            UseMaxFpsBackground = input.ReadBool();
            break;
          }
          case 90: {
            TextLocale = input.ReadString();
            break;
          }
          case 98: {
            AudioLocale = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (engineLog_ == null) {
              EngineLog = new global::Blizzard.Telemetry.Wow.Client.ClientEngineLogV2();
            }
            input.ReadMessage(EngineLog);
            break;
          }
          case 18: {
            if (currentSettings_ == null) {
              CurrentSettings = new global::Blizzard.Telemetry.Wow.Client.ClientGraphicsSettings();
            }
            input.ReadMessage(CurrentSettings);
            break;
          }
          case 26: {
            if (defaultSettings_ == null) {
              DefaultSettings = new global::Blizzard.Telemetry.Wow.Client.ClientGraphicsSettings();
            }
            input.ReadMessage(DefaultSettings);
            break;
          }
          case 34: {
            ExeName = input.ReadString();
            break;
          }
          case 40: {
            AssertionsEnabled = input.ReadBool();
            break;
          }
          case 48: {
            HasAddonsLoaded = input.ReadBool();
            break;
          }
          case 56: {
            MaxFpsSetting = input.ReadInt32();
            break;
          }
          case 64: {
            UseMaxFps = input.ReadBool();
            break;
          }
          case 72: {
            MaxFpsBackgroundSetting = input.ReadInt32();
            break;
          }
          case 80: {
            UseMaxFpsBackground = input.ReadBool();
            break;
          }
          case 90: {
            TextLocale = input.ReadString();
            break;
          }
          case 98: {
            AudioLocale = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
