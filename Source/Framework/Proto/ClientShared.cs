// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ClientShared.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Blizzard.Telemetry.Wow.Client {

  /// <summary>Holder for reflection information generated from ClientShared.proto</summary>
  public static partial class ClientSharedReflection {

    #region Descriptor
    /// <summary>File descriptor for ClientShared.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientSharedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJDbGllbnRTaGFyZWQucHJvdG8SHUJsaXp6YXJkLlRlbGVtZXRyeS5Xb3cu",
            "Q2xpZW50Ghp0ZWxlbWV0cnlfZXh0ZW5zaW9ucy5wcm90bxocVGVsZW1ldHJ5",
            "U2hhcmVkSW1wb3J0cy5wcm90bxoZQ2xpZW50U2hhcmVkSW1wb3J0cy5wcm90",
            "byK8DAoRQ2xpZW50RW5naW5lTG9nVjISNQoKcmVhbG1faW5mbxgBIAEoCzIh",
            "LkJsaXp6YXJkLlRlbGVtZXRyeS5Xb3cuUmVhbG1JbmZvEkUKEmNoYXJhY3Rl",
            "cl9pZGVudGl0eRgCIAEoCzIpLkJsaXp6YXJkLlRlbGVtZXRyeS5Xb3cuQ2hh",
            "cmFjdGVySWRlbnRpdHkSOwoNZmlsZV9sb2NhdGlvbhgDIAEoCzIkLkJsaXp6",
            "YXJkLlRlbGVtZXRyeS5Xb3cuRmlsZUxvY2F0aW9uEj8KDWNsaWVudFZlcnNp",
            "b24YaCABKAsyKC5CbGl6emFyZC5UZWxlbWV0cnkuV293Lldvd0NsaWVudFZl",
            "cnNpb24SEQoJY3B1VmVuZG9yGGkgASgNEhYKDmNwdVNvY2tldENvdW50GGog",
            "ASgNEhkKEWNwdVByb2Nlc3NvckNvdW50GGsgASgNEhoKEmNwdUhhcmR3YXJl",
            "VGhyZWFkcxhsIAEoDRIbChNjdXJyZW50QXJjaGl0ZWN0dXJlGG0gASgNEhoK",
            "EnN5c3RlbUFyY2hpdGVjdHVyZRhuIAEoDRIRCglpc194ODZfNjQYbyABKAgS",
            "EAoIaXNfYXJtNjQYcCABKAgSFAoMaGFzX3g4Nl9TU0UyGHEgASgIEhQKDGhh",
            "c194ODZfU1NFMxhyIAEoCBIWCg5oYXNfeDg2X1NTRTRfMRhzIAEoCBITCgto",
            "YXNfeDg2X0FWWBh0IAEoCBIWCg5oYXNfeDg2X1NTRTRfMhh1IAEoCBITCgto",
            "YXNfeDg2X0FFUxh2IAEoCBIaChJoYXNfeDg2X0NNUFhDSEcxNkIYdyABKAgS",
            "FgoOaGFzX3g4Nl9SRFJBTkQYeCABKAgSFgoOaGFzX3g4Nl9QT1BDTlQYeSAB",
            "KAgSFAoMaGFzX3g4Nl9GMTZDGHogASgIEhMKC2hhc194ODZfRk1BGHsgASgI",
            "EhQKDGhhc194ODZfQVZYMhh8IAEoCBIWCg5oYXNfeDg2X0FWWDUxMhh9IAEo",
            "CBIWCg5oYXNfYXJtX0NSWVBUTxh+IAEoCBISCgpPU19WZXJzaW9uGH8gASgN",
            "EhMKCmlzX3dpbmRvd3MYgAEgASgIEhkKEGlzX3dpbmRvd3NTZXJ2ZXIYgQEg",
            "ASgIEhAKB2lzX3dpbmUYggEgASgIEg8KBmlzX21hYxiDASABKAgSHQoUYmNP",
            "c1ZlcnNpb25fcGxhdGZvcm0YhAEgASgNEhoKEWJjT3NWZXJzaW9uX21ham9y",
            "GIUBIAEoDRIaChFiY09zVmVyc2lvbl9taW5vchiGASABKA0SGgoRYmNPc1Zl",
            "cnNpb25fcGF0Y2gYhwEgASgNEhoKEWJjT3NWZXJzaW9uX2J1aWxkGIgBIAEo",
            "DRISCgltZW1vcnlDUFUYiQEgASgEEg8KBnJlZ2lvbhiKASABKA0SFAoLYm5l",
            "dExhdW5jZXIYiwEgASgNEhUKDG1vbml0b3JDb3VudBiMASABKA0SFAoLcmVz",
            "b2x1dGlvblgYjQEgASgNEhQKC3Jlc29sdXRpb25ZGI4BIAEoDRIRCghtb25p",
            "dG9yWBiPASABKA0SEQoIbW9uaXRvclkYkAEgASgNEhQKC2dwdVZlbmRvcklE",
            "GJEBIAEoDRIUCgtncHVEZXZpY2VJRBiSASABKA0SFQoMc2hhZGVyRmFtaWx5",
            "GJMBIAEoDRIkChtoaWdoZXN0U2hhZGVyTW9kZWxTdXBwb3J0ZWQYlAEgASgN",
            "EhoKEXJheXRyYWNpbmdTdXBwb3J0GJUBIAEoDRITCgp2cnNTdXBwb3J0GJYB",
            "IAEoDRIkChtjb25zdGFudEJ1ZmZlck9mZnNldFN1cHBvcnQYlwEgASgIEhwK",
            "E2RyYXdJbmRpcmVjdFN1cHBvcnQYmAEgASgIEhIKCW1lbW9yeUdQVRiZASAB",
            "KAQSGAoPbWVtb3J5U2hhcmVkR1BVGJoBIAEoBBIOCgVneEFQSRibASABKA0S",
            "EQoIaXNSZXRhaWwYnAEgASgIEhMKCmlzUFRSX0JldGEYnQEgASgIEhMKCmlz",
            "SW50ZXJuYWwYngEgASgIEhYKDXN1cnZleVZlcnNpb24YnwEgASgNEhQKC3N1",
            "cnZleVBhdGNoGKABIAEoDToHwswlA6AGACLNAQojS2V5YmluZGluZ0V4ZWN1",
            "dGlvbkNvdW50c0Zyb21DbGllbnQSRQoSY2hhcmFjdGVyX2lkZW50aXR5GAEg",
            "ASgLMikuQmxpenphcmQuVGVsZW1ldHJ5Lldvdy5DaGFyYWN0ZXJJZGVudGl0",
            "eRJWChlrZXliaW5kaW5nRXhlY3V0aW9uQ291bnRzGAIgAygLMjMuQmxpenph",
            "cmQuVGVsZW1ldHJ5Lldvdy5DbGllbnRLZXliaW5kRXhlY3V0aW9uQ291bnQ6",
            "B8LMJQOgBgAitAEKD0NWYXJzRnJvbUNsaWVudBJFChJjaGFyYWN0ZXJfaWRl",
            "bnRpdHkYASABKAsyKS5CbGl6emFyZC5UZWxlbWV0cnkuV293LkNoYXJhY3Rl",
            "cklkZW50aXR5EjEKBWN2YXJzGAIgAygLMiIuQmxpenphcmQuVGVsZW1ldHJ5",
            "Lldvdy5DbGllbnRDVmFyEgwKBHBhZ2UYAyABKA0SEAoIbGFzdFBhZ2UYBCAB",
            "KAg6B8LMJQOgBgAitwEKEEFkZE9uc0Zyb21DbGllbnQSRQoSY2hhcmFjdGVy",
            "X2lkZW50aXR5GAEgASgLMikuQmxpenphcmQuVGVsZW1ldHJ5Lldvdy5DaGFy",
            "YWN0ZXJJZGVudGl0eRIzCgZhZGRvbnMYAiADKAsyIy5CbGl6emFyZC5UZWxl",
            "bWV0cnkuV293LkNsaWVudEFkZE9uEgwKBHBhZ2UYAyABKA0SEAoIbGFzdFBh",
            "Z2UYBCABKAg6B8LMJQOgBgA="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Blizzard.Telemetry.TelemetryExtensionsReflection.Descriptor, global::Blizzard.Telemetry.Wow.TelemetrySharedImportsReflection.Descriptor, global::Blizzard.Telemetry.Wow.ClientSharedImportsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Blizzard.Telemetry.Wow.Client.ClientEngineLogV2), global::Blizzard.Telemetry.Wow.Client.ClientEngineLogV2.Parser, new[]{ "RealmInfo", "CharacterIdentity", "FileLocation", "ClientVersion", "CpuVendor", "CpuSocketCount", "CpuProcessorCount", "CpuHardwareThreads", "CurrentArchitecture", "SystemArchitecture", "IsX8664", "IsArm64", "HasX86SSE2", "HasX86SSE3", "HasX86SSE41", "HasX86AVX", "HasX86SSE42", "HasX86AES", "HasX86CMPXCHG16B", "HasX86RDRAND", "HasX86POPCNT", "HasX86F16C", "HasX86FMA", "HasX86AVX2", "HasX86AVX512", "HasArmCRYPTO", "OSVersion", "IsWindows", "IsWindowsServer", "IsWine", "IsMac", "BcOsVersionPlatform", "BcOsVersionMajor", "BcOsVersionMinor", "BcOsVersionPatch", "BcOsVersionBuild", "MemoryCPU", "Region", "BnetLauncer", "MonitorCount", "ResolutionX", "ResolutionY", "MonitorX", "MonitorY", "GpuVendorID", "GpuDeviceID", "ShaderFamily", "HighestShaderModelSupported", "RaytracingSupport", "VrsSupport", "ConstantBufferOffsetSupport", "DrawIndirectSupport", "MemoryGPU", "MemorySharedGPU", "GxAPI", "IsRetail", "IsPTRBeta", "IsInternal", "SurveyVersion", "SurveyPatch" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Blizzard.Telemetry.Wow.Client.KeybindingExecutionCountsFromClient), global::Blizzard.Telemetry.Wow.Client.KeybindingExecutionCountsFromClient.Parser, new[]{ "CharacterIdentity", "KeybindingExecutionCounts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Blizzard.Telemetry.Wow.Client.CVarsFromClient), global::Blizzard.Telemetry.Wow.Client.CVarsFromClient.Parser, new[]{ "CharacterIdentity", "Cvars", "Page", "LastPage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Blizzard.Telemetry.Wow.Client.AddOnsFromClient), global::Blizzard.Telemetry.Wow.Client.AddOnsFromClient.Parser, new[]{ "CharacterIdentity", "Addons", "Page", "LastPage" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientEngineLogV2 : pb::IMessage<ClientEngineLogV2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientEngineLogV2> _parser = new pb::MessageParser<ClientEngineLogV2>(() => new ClientEngineLogV2());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ClientEngineLogV2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Blizzard.Telemetry.Wow.Client.ClientSharedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientEngineLogV2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientEngineLogV2(ClientEngineLogV2 other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      realmInfo_ = other.realmInfo_ != null ? other.realmInfo_.Clone() : null;
      characterIdentity_ = other.characterIdentity_ != null ? other.characterIdentity_.Clone() : null;
      fileLocation_ = other.fileLocation_ != null ? other.fileLocation_.Clone() : null;
      clientVersion_ = other.clientVersion_ != null ? other.clientVersion_.Clone() : null;
      cpuVendor_ = other.cpuVendor_;
      cpuSocketCount_ = other.cpuSocketCount_;
      cpuProcessorCount_ = other.cpuProcessorCount_;
      cpuHardwareThreads_ = other.cpuHardwareThreads_;
      currentArchitecture_ = other.currentArchitecture_;
      systemArchitecture_ = other.systemArchitecture_;
      isX8664_ = other.isX8664_;
      isArm64_ = other.isArm64_;
      hasX86SSE2_ = other.hasX86SSE2_;
      hasX86SSE3_ = other.hasX86SSE3_;
      hasX86SSE41_ = other.hasX86SSE41_;
      hasX86AVX_ = other.hasX86AVX_;
      hasX86SSE42_ = other.hasX86SSE42_;
      hasX86AES_ = other.hasX86AES_;
      hasX86CMPXCHG16B_ = other.hasX86CMPXCHG16B_;
      hasX86RDRAND_ = other.hasX86RDRAND_;
      hasX86POPCNT_ = other.hasX86POPCNT_;
      hasX86F16C_ = other.hasX86F16C_;
      hasX86FMA_ = other.hasX86FMA_;
      hasX86AVX2_ = other.hasX86AVX2_;
      hasX86AVX512_ = other.hasX86AVX512_;
      hasArmCRYPTO_ = other.hasArmCRYPTO_;
      oSVersion_ = other.oSVersion_;
      isWindows_ = other.isWindows_;
      isWindowsServer_ = other.isWindowsServer_;
      isWine_ = other.isWine_;
      isMac_ = other.isMac_;
      bcOsVersionPlatform_ = other.bcOsVersionPlatform_;
      bcOsVersionMajor_ = other.bcOsVersionMajor_;
      bcOsVersionMinor_ = other.bcOsVersionMinor_;
      bcOsVersionPatch_ = other.bcOsVersionPatch_;
      bcOsVersionBuild_ = other.bcOsVersionBuild_;
      memoryCPU_ = other.memoryCPU_;
      region_ = other.region_;
      bnetLauncer_ = other.bnetLauncer_;
      monitorCount_ = other.monitorCount_;
      resolutionX_ = other.resolutionX_;
      resolutionY_ = other.resolutionY_;
      monitorX_ = other.monitorX_;
      monitorY_ = other.monitorY_;
      gpuVendorID_ = other.gpuVendorID_;
      gpuDeviceID_ = other.gpuDeviceID_;
      shaderFamily_ = other.shaderFamily_;
      highestShaderModelSupported_ = other.highestShaderModelSupported_;
      raytracingSupport_ = other.raytracingSupport_;
      vrsSupport_ = other.vrsSupport_;
      constantBufferOffsetSupport_ = other.constantBufferOffsetSupport_;
      drawIndirectSupport_ = other.drawIndirectSupport_;
      memoryGPU_ = other.memoryGPU_;
      memorySharedGPU_ = other.memorySharedGPU_;
      gxAPI_ = other.gxAPI_;
      isRetail_ = other.isRetail_;
      isPTRBeta_ = other.isPTRBeta_;
      isInternal_ = other.isInternal_;
      surveyVersion_ = other.surveyVersion_;
      surveyPatch_ = other.surveyPatch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientEngineLogV2 Clone() {
      return new ClientEngineLogV2(this);
    }

    /// <summary>Field number for the "realm_info" field.</summary>
    public const int RealmInfoFieldNumber = 1;
    private global::Blizzard.Telemetry.Wow.RealmInfo realmInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blizzard.Telemetry.Wow.RealmInfo RealmInfo {
      get { return realmInfo_; }
      set {
        realmInfo_ = value;
      }
    }

    /// <summary>Field number for the "character_identity" field.</summary>
    public const int CharacterIdentityFieldNumber = 2;
    private global::Blizzard.Telemetry.Wow.CharacterIdentity characterIdentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blizzard.Telemetry.Wow.CharacterIdentity CharacterIdentity {
      get { return characterIdentity_; }
      set {
        characterIdentity_ = value;
      }
    }

    /// <summary>Field number for the "file_location" field.</summary>
    public const int FileLocationFieldNumber = 3;
    private global::Blizzard.Telemetry.Wow.FileLocation fileLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blizzard.Telemetry.Wow.FileLocation FileLocation {
      get { return fileLocation_; }
      set {
        fileLocation_ = value;
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 104;
    private global::Blizzard.Telemetry.Wow.WowClientVersion clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blizzard.Telemetry.Wow.WowClientVersion ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = value;
      }
    }

    /// <summary>Field number for the "cpuVendor" field.</summary>
    public const int CpuVendorFieldNumber = 105;
    private readonly static uint CpuVendorDefaultValue = 0;

    private uint cpuVendor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CpuVendor {
      get { if ((_hasBits0 & 1) != 0) { return cpuVendor_; } else { return CpuVendorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cpuVendor_ = value;
      }
    }
    /// <summary>Gets whether the "cpuVendor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCpuVendor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cpuVendor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCpuVendor() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cpuSocketCount" field.</summary>
    public const int CpuSocketCountFieldNumber = 106;
    private readonly static uint CpuSocketCountDefaultValue = 0;

    private uint cpuSocketCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CpuSocketCount {
      get { if ((_hasBits0 & 2) != 0) { return cpuSocketCount_; } else { return CpuSocketCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        cpuSocketCount_ = value;
      }
    }
    /// <summary>Gets whether the "cpuSocketCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCpuSocketCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "cpuSocketCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCpuSocketCount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cpuProcessorCount" field.</summary>
    public const int CpuProcessorCountFieldNumber = 107;
    private readonly static uint CpuProcessorCountDefaultValue = 0;

    private uint cpuProcessorCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CpuProcessorCount {
      get { if ((_hasBits0 & 4) != 0) { return cpuProcessorCount_; } else { return CpuProcessorCountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cpuProcessorCount_ = value;
      }
    }
    /// <summary>Gets whether the "cpuProcessorCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCpuProcessorCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cpuProcessorCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCpuProcessorCount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "cpuHardwareThreads" field.</summary>
    public const int CpuHardwareThreadsFieldNumber = 108;
    private readonly static uint CpuHardwareThreadsDefaultValue = 0;

    private uint cpuHardwareThreads_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CpuHardwareThreads {
      get { if ((_hasBits0 & 8) != 0) { return cpuHardwareThreads_; } else { return CpuHardwareThreadsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cpuHardwareThreads_ = value;
      }
    }
    /// <summary>Gets whether the "cpuHardwareThreads" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCpuHardwareThreads {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cpuHardwareThreads" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCpuHardwareThreads() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "currentArchitecture" field.</summary>
    public const int CurrentArchitectureFieldNumber = 109;
    private readonly static uint CurrentArchitectureDefaultValue = 0;

    private uint currentArchitecture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurrentArchitecture {
      get { if ((_hasBits0 & 16) != 0) { return currentArchitecture_; } else { return CurrentArchitectureDefaultValue; } }
      set {
        _hasBits0 |= 16;
        currentArchitecture_ = value;
      }
    }
    /// <summary>Gets whether the "currentArchitecture" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentArchitecture {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "currentArchitecture" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentArchitecture() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "systemArchitecture" field.</summary>
    public const int SystemArchitectureFieldNumber = 110;
    private readonly static uint SystemArchitectureDefaultValue = 0;

    private uint systemArchitecture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SystemArchitecture {
      get { if ((_hasBits0 & 32) != 0) { return systemArchitecture_; } else { return SystemArchitectureDefaultValue; } }
      set {
        _hasBits0 |= 32;
        systemArchitecture_ = value;
      }
    }
    /// <summary>Gets whether the "systemArchitecture" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSystemArchitecture {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "systemArchitecture" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSystemArchitecture() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "is_x86_64" field.</summary>
    public const int IsX8664FieldNumber = 111;
    private readonly static bool IsX8664DefaultValue = false;

    private bool isX8664_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsX8664 {
      get { if ((_hasBits0 & 64) != 0) { return isX8664_; } else { return IsX8664DefaultValue; } }
      set {
        _hasBits0 |= 64;
        isX8664_ = value;
      }
    }
    /// <summary>Gets whether the "is_x86_64" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsX8664 {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_x86_64" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsX8664() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "is_arm64" field.</summary>
    public const int IsArm64FieldNumber = 112;
    private readonly static bool IsArm64DefaultValue = false;

    private bool isArm64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsArm64 {
      get { if ((_hasBits0 & 128) != 0) { return isArm64_; } else { return IsArm64DefaultValue; } }
      set {
        _hasBits0 |= 128;
        isArm64_ = value;
      }
    }
    /// <summary>Gets whether the "is_arm64" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsArm64 {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_arm64" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsArm64() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "has_x86_SSE2" field.</summary>
    public const int HasX86SSE2FieldNumber = 113;
    private readonly static bool HasX86SSE2DefaultValue = false;

    private bool hasX86SSE2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX86SSE2 {
      get { if ((_hasBits0 & 256) != 0) { return hasX86SSE2_; } else { return HasX86SSE2DefaultValue; } }
      set {
        _hasBits0 |= 256;
        hasX86SSE2_ = value;
      }
    }
    /// <summary>Gets whether the "has_x86_SSE2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasX86SSE2 {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "has_x86_SSE2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasX86SSE2() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "has_x86_SSE3" field.</summary>
    public const int HasX86SSE3FieldNumber = 114;
    private readonly static bool HasX86SSE3DefaultValue = false;

    private bool hasX86SSE3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX86SSE3 {
      get { if ((_hasBits0 & 512) != 0) { return hasX86SSE3_; } else { return HasX86SSE3DefaultValue; } }
      set {
        _hasBits0 |= 512;
        hasX86SSE3_ = value;
      }
    }
    /// <summary>Gets whether the "has_x86_SSE3" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasX86SSE3 {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "has_x86_SSE3" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasX86SSE3() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "has_x86_SSE4_1" field.</summary>
    public const int HasX86SSE41FieldNumber = 115;
    private readonly static bool HasX86SSE41DefaultValue = false;

    private bool hasX86SSE41_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX86SSE41 {
      get { if ((_hasBits0 & 1024) != 0) { return hasX86SSE41_; } else { return HasX86SSE41DefaultValue; } }
      set {
        _hasBits0 |= 1024;
        hasX86SSE41_ = value;
      }
    }
    /// <summary>Gets whether the "has_x86_SSE4_1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasX86SSE41 {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "has_x86_SSE4_1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasX86SSE41() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "has_x86_AVX" field.</summary>
    public const int HasX86AVXFieldNumber = 116;
    private readonly static bool HasX86AVXDefaultValue = false;

    private bool hasX86AVX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX86AVX {
      get { if ((_hasBits0 & 2048) != 0) { return hasX86AVX_; } else { return HasX86AVXDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        hasX86AVX_ = value;
      }
    }
    /// <summary>Gets whether the "has_x86_AVX" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasX86AVX {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "has_x86_AVX" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasX86AVX() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "has_x86_SSE4_2" field.</summary>
    public const int HasX86SSE42FieldNumber = 117;
    private readonly static bool HasX86SSE42DefaultValue = false;

    private bool hasX86SSE42_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX86SSE42 {
      get { if ((_hasBits0 & 4096) != 0) { return hasX86SSE42_; } else { return HasX86SSE42DefaultValue; } }
      set {
        _hasBits0 |= 4096;
        hasX86SSE42_ = value;
      }
    }
    /// <summary>Gets whether the "has_x86_SSE4_2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasX86SSE42 {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "has_x86_SSE4_2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasX86SSE42() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "has_x86_AES" field.</summary>
    public const int HasX86AESFieldNumber = 118;
    private readonly static bool HasX86AESDefaultValue = false;

    private bool hasX86AES_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX86AES {
      get { if ((_hasBits0 & 8192) != 0) { return hasX86AES_; } else { return HasX86AESDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        hasX86AES_ = value;
      }
    }
    /// <summary>Gets whether the "has_x86_AES" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasX86AES {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "has_x86_AES" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasX86AES() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "has_x86_CMPXCHG16B" field.</summary>
    public const int HasX86CMPXCHG16BFieldNumber = 119;
    private readonly static bool HasX86CMPXCHG16BDefaultValue = false;

    private bool hasX86CMPXCHG16B_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX86CMPXCHG16B {
      get { if ((_hasBits0 & 16384) != 0) { return hasX86CMPXCHG16B_; } else { return HasX86CMPXCHG16BDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        hasX86CMPXCHG16B_ = value;
      }
    }
    /// <summary>Gets whether the "has_x86_CMPXCHG16B" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasX86CMPXCHG16B {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "has_x86_CMPXCHG16B" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasX86CMPXCHG16B() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "has_x86_RDRAND" field.</summary>
    public const int HasX86RDRANDFieldNumber = 120;
    private readonly static bool HasX86RDRANDDefaultValue = false;

    private bool hasX86RDRAND_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX86RDRAND {
      get { if ((_hasBits0 & 32768) != 0) { return hasX86RDRAND_; } else { return HasX86RDRANDDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        hasX86RDRAND_ = value;
      }
    }
    /// <summary>Gets whether the "has_x86_RDRAND" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasX86RDRAND {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "has_x86_RDRAND" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasX86RDRAND() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "has_x86_POPCNT" field.</summary>
    public const int HasX86POPCNTFieldNumber = 121;
    private readonly static bool HasX86POPCNTDefaultValue = false;

    private bool hasX86POPCNT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX86POPCNT {
      get { if ((_hasBits0 & 65536) != 0) { return hasX86POPCNT_; } else { return HasX86POPCNTDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        hasX86POPCNT_ = value;
      }
    }
    /// <summary>Gets whether the "has_x86_POPCNT" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasX86POPCNT {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "has_x86_POPCNT" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasX86POPCNT() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "has_x86_F16C" field.</summary>
    public const int HasX86F16CFieldNumber = 122;
    private readonly static bool HasX86F16CDefaultValue = false;

    private bool hasX86F16C_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX86F16C {
      get { if ((_hasBits0 & 131072) != 0) { return hasX86F16C_; } else { return HasX86F16CDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        hasX86F16C_ = value;
      }
    }
    /// <summary>Gets whether the "has_x86_F16C" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasX86F16C {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "has_x86_F16C" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasX86F16C() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "has_x86_FMA" field.</summary>
    public const int HasX86FMAFieldNumber = 123;
    private readonly static bool HasX86FMADefaultValue = false;

    private bool hasX86FMA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX86FMA {
      get { if ((_hasBits0 & 262144) != 0) { return hasX86FMA_; } else { return HasX86FMADefaultValue; } }
      set {
        _hasBits0 |= 262144;
        hasX86FMA_ = value;
      }
    }
    /// <summary>Gets whether the "has_x86_FMA" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasX86FMA {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "has_x86_FMA" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasX86FMA() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "has_x86_AVX2" field.</summary>
    public const int HasX86AVX2FieldNumber = 124;
    private readonly static bool HasX86AVX2DefaultValue = false;

    private bool hasX86AVX2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX86AVX2 {
      get { if ((_hasBits0 & 524288) != 0) { return hasX86AVX2_; } else { return HasX86AVX2DefaultValue; } }
      set {
        _hasBits0 |= 524288;
        hasX86AVX2_ = value;
      }
    }
    /// <summary>Gets whether the "has_x86_AVX2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasX86AVX2 {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "has_x86_AVX2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasX86AVX2() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "has_x86_AVX512" field.</summary>
    public const int HasX86AVX512FieldNumber = 125;
    private readonly static bool HasX86AVX512DefaultValue = false;

    private bool hasX86AVX512_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasX86AVX512 {
      get { if ((_hasBits0 & 1048576) != 0) { return hasX86AVX512_; } else { return HasX86AVX512DefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        hasX86AVX512_ = value;
      }
    }
    /// <summary>Gets whether the "has_x86_AVX512" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasX86AVX512 {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "has_x86_AVX512" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasX86AVX512() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "has_arm_CRYPTO" field.</summary>
    public const int HasArmCRYPTOFieldNumber = 126;
    private readonly static bool HasArmCRYPTODefaultValue = false;

    private bool hasArmCRYPTO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasArmCRYPTO {
      get { if ((_hasBits0 & 2097152) != 0) { return hasArmCRYPTO_; } else { return HasArmCRYPTODefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        hasArmCRYPTO_ = value;
      }
    }
    /// <summary>Gets whether the "has_arm_CRYPTO" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasArmCRYPTO {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "has_arm_CRYPTO" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasArmCRYPTO() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "OS_Version" field.</summary>
    public const int OSVersionFieldNumber = 127;
    private readonly static uint OSVersionDefaultValue = 0;

    private uint oSVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OSVersion {
      get { if ((_hasBits0 & 4194304) != 0) { return oSVersion_; } else { return OSVersionDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        oSVersion_ = value;
      }
    }
    /// <summary>Gets whether the "OS_Version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOSVersion {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "OS_Version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOSVersion() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "is_windows" field.</summary>
    public const int IsWindowsFieldNumber = 128;
    private readonly static bool IsWindowsDefaultValue = false;

    private bool isWindows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsWindows {
      get { if ((_hasBits0 & 8388608) != 0) { return isWindows_; } else { return IsWindowsDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        isWindows_ = value;
      }
    }
    /// <summary>Gets whether the "is_windows" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsWindows {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "is_windows" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsWindows() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "is_windowsServer" field.</summary>
    public const int IsWindowsServerFieldNumber = 129;
    private readonly static bool IsWindowsServerDefaultValue = false;

    private bool isWindowsServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsWindowsServer {
      get { if ((_hasBits0 & 16777216) != 0) { return isWindowsServer_; } else { return IsWindowsServerDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        isWindowsServer_ = value;
      }
    }
    /// <summary>Gets whether the "is_windowsServer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsWindowsServer {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "is_windowsServer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsWindowsServer() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "is_wine" field.</summary>
    public const int IsWineFieldNumber = 130;
    private readonly static bool IsWineDefaultValue = false;

    private bool isWine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsWine {
      get { if ((_hasBits0 & 33554432) != 0) { return isWine_; } else { return IsWineDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        isWine_ = value;
      }
    }
    /// <summary>Gets whether the "is_wine" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsWine {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "is_wine" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsWine() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "is_mac" field.</summary>
    public const int IsMacFieldNumber = 131;
    private readonly static bool IsMacDefaultValue = false;

    private bool isMac_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsMac {
      get { if ((_hasBits0 & 67108864) != 0) { return isMac_; } else { return IsMacDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        isMac_ = value;
      }
    }
    /// <summary>Gets whether the "is_mac" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsMac {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "is_mac" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsMac() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "bcOsVersion_platform" field.</summary>
    public const int BcOsVersionPlatformFieldNumber = 132;
    private readonly static uint BcOsVersionPlatformDefaultValue = 0;

    private uint bcOsVersionPlatform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BcOsVersionPlatform {
      get { if ((_hasBits0 & 134217728) != 0) { return bcOsVersionPlatform_; } else { return BcOsVersionPlatformDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        bcOsVersionPlatform_ = value;
      }
    }
    /// <summary>Gets whether the "bcOsVersion_platform" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBcOsVersionPlatform {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "bcOsVersion_platform" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBcOsVersionPlatform() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "bcOsVersion_major" field.</summary>
    public const int BcOsVersionMajorFieldNumber = 133;
    private readonly static uint BcOsVersionMajorDefaultValue = 0;

    private uint bcOsVersionMajor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BcOsVersionMajor {
      get { if ((_hasBits0 & 268435456) != 0) { return bcOsVersionMajor_; } else { return BcOsVersionMajorDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        bcOsVersionMajor_ = value;
      }
    }
    /// <summary>Gets whether the "bcOsVersion_major" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBcOsVersionMajor {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "bcOsVersion_major" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBcOsVersionMajor() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "bcOsVersion_minor" field.</summary>
    public const int BcOsVersionMinorFieldNumber = 134;
    private readonly static uint BcOsVersionMinorDefaultValue = 0;

    private uint bcOsVersionMinor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BcOsVersionMinor {
      get { if ((_hasBits0 & 536870912) != 0) { return bcOsVersionMinor_; } else { return BcOsVersionMinorDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        bcOsVersionMinor_ = value;
      }
    }
    /// <summary>Gets whether the "bcOsVersion_minor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBcOsVersionMinor {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "bcOsVersion_minor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBcOsVersionMinor() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "bcOsVersion_patch" field.</summary>
    public const int BcOsVersionPatchFieldNumber = 135;
    private readonly static uint BcOsVersionPatchDefaultValue = 0;

    private uint bcOsVersionPatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BcOsVersionPatch {
      get { if ((_hasBits0 & 1073741824) != 0) { return bcOsVersionPatch_; } else { return BcOsVersionPatchDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        bcOsVersionPatch_ = value;
      }
    }
    /// <summary>Gets whether the "bcOsVersion_patch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBcOsVersionPatch {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "bcOsVersion_patch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBcOsVersionPatch() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "bcOsVersion_build" field.</summary>
    public const int BcOsVersionBuildFieldNumber = 136;
    private readonly static uint BcOsVersionBuildDefaultValue = 0;

    private uint bcOsVersionBuild_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BcOsVersionBuild {
      get { if ((_hasBits0 & -2147483648) != 0) { return bcOsVersionBuild_; } else { return BcOsVersionBuildDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        bcOsVersionBuild_ = value;
      }
    }
    /// <summary>Gets whether the "bcOsVersion_build" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBcOsVersionBuild {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "bcOsVersion_build" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBcOsVersionBuild() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "memoryCPU" field.</summary>
    public const int MemoryCPUFieldNumber = 137;
    private readonly static ulong MemoryCPUDefaultValue = 0UL;

    private ulong memoryCPU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MemoryCPU {
      get { if ((_hasBits1 & 1) != 0) { return memoryCPU_; } else { return MemoryCPUDefaultValue; } }
      set {
        _hasBits1 |= 1;
        memoryCPU_ = value;
      }
    }
    /// <summary>Gets whether the "memoryCPU" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMemoryCPU {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "memoryCPU" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMemoryCPU() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 138;
    private readonly static uint RegionDefaultValue = 0;

    private uint region_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Region {
      get { if ((_hasBits1 & 2) != 0) { return region_; } else { return RegionDefaultValue; } }
      set {
        _hasBits1 |= 2;
        region_ = value;
      }
    }
    /// <summary>Gets whether the "region" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRegion {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "region" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRegion() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "bnetLauncer" field.</summary>
    public const int BnetLauncerFieldNumber = 139;
    private readonly static uint BnetLauncerDefaultValue = 0;

    private uint bnetLauncer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BnetLauncer {
      get { if ((_hasBits1 & 4) != 0) { return bnetLauncer_; } else { return BnetLauncerDefaultValue; } }
      set {
        _hasBits1 |= 4;
        bnetLauncer_ = value;
      }
    }
    /// <summary>Gets whether the "bnetLauncer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBnetLauncer {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "bnetLauncer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBnetLauncer() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "monitorCount" field.</summary>
    public const int MonitorCountFieldNumber = 140;
    private readonly static uint MonitorCountDefaultValue = 0;

    private uint monitorCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MonitorCount {
      get { if ((_hasBits1 & 8) != 0) { return monitorCount_; } else { return MonitorCountDefaultValue; } }
      set {
        _hasBits1 |= 8;
        monitorCount_ = value;
      }
    }
    /// <summary>Gets whether the "monitorCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMonitorCount {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "monitorCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMonitorCount() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "resolutionX" field.</summary>
    public const int ResolutionXFieldNumber = 141;
    private readonly static uint ResolutionXDefaultValue = 0;

    private uint resolutionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ResolutionX {
      get { if ((_hasBits1 & 16) != 0) { return resolutionX_; } else { return ResolutionXDefaultValue; } }
      set {
        _hasBits1 |= 16;
        resolutionX_ = value;
      }
    }
    /// <summary>Gets whether the "resolutionX" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasResolutionX {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "resolutionX" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearResolutionX() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "resolutionY" field.</summary>
    public const int ResolutionYFieldNumber = 142;
    private readonly static uint ResolutionYDefaultValue = 0;

    private uint resolutionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ResolutionY {
      get { if ((_hasBits1 & 32) != 0) { return resolutionY_; } else { return ResolutionYDefaultValue; } }
      set {
        _hasBits1 |= 32;
        resolutionY_ = value;
      }
    }
    /// <summary>Gets whether the "resolutionY" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasResolutionY {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "resolutionY" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearResolutionY() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "monitorX" field.</summary>
    public const int MonitorXFieldNumber = 143;
    private readonly static uint MonitorXDefaultValue = 0;

    private uint monitorX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MonitorX {
      get { if ((_hasBits1 & 64) != 0) { return monitorX_; } else { return MonitorXDefaultValue; } }
      set {
        _hasBits1 |= 64;
        monitorX_ = value;
      }
    }
    /// <summary>Gets whether the "monitorX" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMonitorX {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "monitorX" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMonitorX() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "monitorY" field.</summary>
    public const int MonitorYFieldNumber = 144;
    private readonly static uint MonitorYDefaultValue = 0;

    private uint monitorY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MonitorY {
      get { if ((_hasBits1 & 128) != 0) { return monitorY_; } else { return MonitorYDefaultValue; } }
      set {
        _hasBits1 |= 128;
        monitorY_ = value;
      }
    }
    /// <summary>Gets whether the "monitorY" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMonitorY {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "monitorY" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMonitorY() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "gpuVendorID" field.</summary>
    public const int GpuVendorIDFieldNumber = 145;
    private readonly static uint GpuVendorIDDefaultValue = 0;

    private uint gpuVendorID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GpuVendorID {
      get { if ((_hasBits1 & 256) != 0) { return gpuVendorID_; } else { return GpuVendorIDDefaultValue; } }
      set {
        _hasBits1 |= 256;
        gpuVendorID_ = value;
      }
    }
    /// <summary>Gets whether the "gpuVendorID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpuVendorID {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "gpuVendorID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpuVendorID() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "gpuDeviceID" field.</summary>
    public const int GpuDeviceIDFieldNumber = 146;
    private readonly static uint GpuDeviceIDDefaultValue = 0;

    private uint gpuDeviceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GpuDeviceID {
      get { if ((_hasBits1 & 512) != 0) { return gpuDeviceID_; } else { return GpuDeviceIDDefaultValue; } }
      set {
        _hasBits1 |= 512;
        gpuDeviceID_ = value;
      }
    }
    /// <summary>Gets whether the "gpuDeviceID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpuDeviceID {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "gpuDeviceID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpuDeviceID() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "shaderFamily" field.</summary>
    public const int ShaderFamilyFieldNumber = 147;
    private readonly static uint ShaderFamilyDefaultValue = 0;

    private uint shaderFamily_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ShaderFamily {
      get { if ((_hasBits1 & 1024) != 0) { return shaderFamily_; } else { return ShaderFamilyDefaultValue; } }
      set {
        _hasBits1 |= 1024;
        shaderFamily_ = value;
      }
    }
    /// <summary>Gets whether the "shaderFamily" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShaderFamily {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "shaderFamily" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShaderFamily() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "highestShaderModelSupported" field.</summary>
    public const int HighestShaderModelSupportedFieldNumber = 148;
    private readonly static uint HighestShaderModelSupportedDefaultValue = 0;

    private uint highestShaderModelSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HighestShaderModelSupported {
      get { if ((_hasBits1 & 2048) != 0) { return highestShaderModelSupported_; } else { return HighestShaderModelSupportedDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        highestShaderModelSupported_ = value;
      }
    }
    /// <summary>Gets whether the "highestShaderModelSupported" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHighestShaderModelSupported {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "highestShaderModelSupported" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHighestShaderModelSupported() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "raytracingSupport" field.</summary>
    public const int RaytracingSupportFieldNumber = 149;
    private readonly static uint RaytracingSupportDefaultValue = 0;

    private uint raytracingSupport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RaytracingSupport {
      get { if ((_hasBits1 & 4096) != 0) { return raytracingSupport_; } else { return RaytracingSupportDefaultValue; } }
      set {
        _hasBits1 |= 4096;
        raytracingSupport_ = value;
      }
    }
    /// <summary>Gets whether the "raytracingSupport" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRaytracingSupport {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "raytracingSupport" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRaytracingSupport() {
      _hasBits1 &= ~4096;
    }

    /// <summary>Field number for the "vrsSupport" field.</summary>
    public const int VrsSupportFieldNumber = 150;
    private readonly static uint VrsSupportDefaultValue = 0;

    private uint vrsSupport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VrsSupport {
      get { if ((_hasBits1 & 8192) != 0) { return vrsSupport_; } else { return VrsSupportDefaultValue; } }
      set {
        _hasBits1 |= 8192;
        vrsSupport_ = value;
      }
    }
    /// <summary>Gets whether the "vrsSupport" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVrsSupport {
      get { return (_hasBits1 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "vrsSupport" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVrsSupport() {
      _hasBits1 &= ~8192;
    }

    /// <summary>Field number for the "constantBufferOffsetSupport" field.</summary>
    public const int ConstantBufferOffsetSupportFieldNumber = 151;
    private readonly static bool ConstantBufferOffsetSupportDefaultValue = false;

    private bool constantBufferOffsetSupport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ConstantBufferOffsetSupport {
      get { if ((_hasBits1 & 16384) != 0) { return constantBufferOffsetSupport_; } else { return ConstantBufferOffsetSupportDefaultValue; } }
      set {
        _hasBits1 |= 16384;
        constantBufferOffsetSupport_ = value;
      }
    }
    /// <summary>Gets whether the "constantBufferOffsetSupport" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConstantBufferOffsetSupport {
      get { return (_hasBits1 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "constantBufferOffsetSupport" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConstantBufferOffsetSupport() {
      _hasBits1 &= ~16384;
    }

    /// <summary>Field number for the "drawIndirectSupport" field.</summary>
    public const int DrawIndirectSupportFieldNumber = 152;
    private readonly static bool DrawIndirectSupportDefaultValue = false;

    private bool drawIndirectSupport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DrawIndirectSupport {
      get { if ((_hasBits1 & 32768) != 0) { return drawIndirectSupport_; } else { return DrawIndirectSupportDefaultValue; } }
      set {
        _hasBits1 |= 32768;
        drawIndirectSupport_ = value;
      }
    }
    /// <summary>Gets whether the "drawIndirectSupport" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDrawIndirectSupport {
      get { return (_hasBits1 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "drawIndirectSupport" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDrawIndirectSupport() {
      _hasBits1 &= ~32768;
    }

    /// <summary>Field number for the "memoryGPU" field.</summary>
    public const int MemoryGPUFieldNumber = 153;
    private readonly static ulong MemoryGPUDefaultValue = 0UL;

    private ulong memoryGPU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MemoryGPU {
      get { if ((_hasBits1 & 65536) != 0) { return memoryGPU_; } else { return MemoryGPUDefaultValue; } }
      set {
        _hasBits1 |= 65536;
        memoryGPU_ = value;
      }
    }
    /// <summary>Gets whether the "memoryGPU" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMemoryGPU {
      get { return (_hasBits1 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "memoryGPU" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMemoryGPU() {
      _hasBits1 &= ~65536;
    }

    /// <summary>Field number for the "memorySharedGPU" field.</summary>
    public const int MemorySharedGPUFieldNumber = 154;
    private readonly static ulong MemorySharedGPUDefaultValue = 0UL;

    private ulong memorySharedGPU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong MemorySharedGPU {
      get { if ((_hasBits1 & 131072) != 0) { return memorySharedGPU_; } else { return MemorySharedGPUDefaultValue; } }
      set {
        _hasBits1 |= 131072;
        memorySharedGPU_ = value;
      }
    }
    /// <summary>Gets whether the "memorySharedGPU" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMemorySharedGPU {
      get { return (_hasBits1 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "memorySharedGPU" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMemorySharedGPU() {
      _hasBits1 &= ~131072;
    }

    /// <summary>Field number for the "gxAPI" field.</summary>
    public const int GxAPIFieldNumber = 155;
    private readonly static uint GxAPIDefaultValue = 0;

    private uint gxAPI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GxAPI {
      get { if ((_hasBits1 & 262144) != 0) { return gxAPI_; } else { return GxAPIDefaultValue; } }
      set {
        _hasBits1 |= 262144;
        gxAPI_ = value;
      }
    }
    /// <summary>Gets whether the "gxAPI" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGxAPI {
      get { return (_hasBits1 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "gxAPI" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGxAPI() {
      _hasBits1 &= ~262144;
    }

    /// <summary>Field number for the "isRetail" field.</summary>
    public const int IsRetailFieldNumber = 156;
    private readonly static bool IsRetailDefaultValue = false;

    private bool isRetail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRetail {
      get { if ((_hasBits1 & 524288) != 0) { return isRetail_; } else { return IsRetailDefaultValue; } }
      set {
        _hasBits1 |= 524288;
        isRetail_ = value;
      }
    }
    /// <summary>Gets whether the "isRetail" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRetail {
      get { return (_hasBits1 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "isRetail" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRetail() {
      _hasBits1 &= ~524288;
    }

    /// <summary>Field number for the "isPTR_Beta" field.</summary>
    public const int IsPTRBetaFieldNumber = 157;
    private readonly static bool IsPTRBetaDefaultValue = false;

    private bool isPTRBeta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPTRBeta {
      get { if ((_hasBits1 & 1048576) != 0) { return isPTRBeta_; } else { return IsPTRBetaDefaultValue; } }
      set {
        _hasBits1 |= 1048576;
        isPTRBeta_ = value;
      }
    }
    /// <summary>Gets whether the "isPTR_Beta" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPTRBeta {
      get { return (_hasBits1 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "isPTR_Beta" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPTRBeta() {
      _hasBits1 &= ~1048576;
    }

    /// <summary>Field number for the "isInternal" field.</summary>
    public const int IsInternalFieldNumber = 158;
    private readonly static bool IsInternalDefaultValue = false;

    private bool isInternal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInternal {
      get { if ((_hasBits1 & 2097152) != 0) { return isInternal_; } else { return IsInternalDefaultValue; } }
      set {
        _hasBits1 |= 2097152;
        isInternal_ = value;
      }
    }
    /// <summary>Gets whether the "isInternal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInternal {
      get { return (_hasBits1 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "isInternal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInternal() {
      _hasBits1 &= ~2097152;
    }

    /// <summary>Field number for the "surveyVersion" field.</summary>
    public const int SurveyVersionFieldNumber = 159;
    private readonly static uint SurveyVersionDefaultValue = 0;

    private uint surveyVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SurveyVersion {
      get { if ((_hasBits1 & 4194304) != 0) { return surveyVersion_; } else { return SurveyVersionDefaultValue; } }
      set {
        _hasBits1 |= 4194304;
        surveyVersion_ = value;
      }
    }
    /// <summary>Gets whether the "surveyVersion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSurveyVersion {
      get { return (_hasBits1 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "surveyVersion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSurveyVersion() {
      _hasBits1 &= ~4194304;
    }

    /// <summary>Field number for the "surveyPatch" field.</summary>
    public const int SurveyPatchFieldNumber = 160;
    private readonly static uint SurveyPatchDefaultValue = 0;

    private uint surveyPatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SurveyPatch {
      get { if ((_hasBits1 & 8388608) != 0) { return surveyPatch_; } else { return SurveyPatchDefaultValue; } }
      set {
        _hasBits1 |= 8388608;
        surveyPatch_ = value;
      }
    }
    /// <summary>Gets whether the "surveyPatch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSurveyPatch {
      get { return (_hasBits1 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "surveyPatch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSurveyPatch() {
      _hasBits1 &= ~8388608;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ClientEngineLogV2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ClientEngineLogV2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RealmInfo, other.RealmInfo)) return false;
      if (!object.Equals(CharacterIdentity, other.CharacterIdentity)) return false;
      if (!object.Equals(FileLocation, other.FileLocation)) return false;
      if (!object.Equals(ClientVersion, other.ClientVersion)) return false;
      if (CpuVendor != other.CpuVendor) return false;
      if (CpuSocketCount != other.CpuSocketCount) return false;
      if (CpuProcessorCount != other.CpuProcessorCount) return false;
      if (CpuHardwareThreads != other.CpuHardwareThreads) return false;
      if (CurrentArchitecture != other.CurrentArchitecture) return false;
      if (SystemArchitecture != other.SystemArchitecture) return false;
      if (IsX8664 != other.IsX8664) return false;
      if (IsArm64 != other.IsArm64) return false;
      if (HasX86SSE2 != other.HasX86SSE2) return false;
      if (HasX86SSE3 != other.HasX86SSE3) return false;
      if (HasX86SSE41 != other.HasX86SSE41) return false;
      if (HasX86AVX != other.HasX86AVX) return false;
      if (HasX86SSE42 != other.HasX86SSE42) return false;
      if (HasX86AES != other.HasX86AES) return false;
      if (HasX86CMPXCHG16B != other.HasX86CMPXCHG16B) return false;
      if (HasX86RDRAND != other.HasX86RDRAND) return false;
      if (HasX86POPCNT != other.HasX86POPCNT) return false;
      if (HasX86F16C != other.HasX86F16C) return false;
      if (HasX86FMA != other.HasX86FMA) return false;
      if (HasX86AVX2 != other.HasX86AVX2) return false;
      if (HasX86AVX512 != other.HasX86AVX512) return false;
      if (HasArmCRYPTO != other.HasArmCRYPTO) return false;
      if (OSVersion != other.OSVersion) return false;
      if (IsWindows != other.IsWindows) return false;
      if (IsWindowsServer != other.IsWindowsServer) return false;
      if (IsWine != other.IsWine) return false;
      if (IsMac != other.IsMac) return false;
      if (BcOsVersionPlatform != other.BcOsVersionPlatform) return false;
      if (BcOsVersionMajor != other.BcOsVersionMajor) return false;
      if (BcOsVersionMinor != other.BcOsVersionMinor) return false;
      if (BcOsVersionPatch != other.BcOsVersionPatch) return false;
      if (BcOsVersionBuild != other.BcOsVersionBuild) return false;
      if (MemoryCPU != other.MemoryCPU) return false;
      if (Region != other.Region) return false;
      if (BnetLauncer != other.BnetLauncer) return false;
      if (MonitorCount != other.MonitorCount) return false;
      if (ResolutionX != other.ResolutionX) return false;
      if (ResolutionY != other.ResolutionY) return false;
      if (MonitorX != other.MonitorX) return false;
      if (MonitorY != other.MonitorY) return false;
      if (GpuVendorID != other.GpuVendorID) return false;
      if (GpuDeviceID != other.GpuDeviceID) return false;
      if (ShaderFamily != other.ShaderFamily) return false;
      if (HighestShaderModelSupported != other.HighestShaderModelSupported) return false;
      if (RaytracingSupport != other.RaytracingSupport) return false;
      if (VrsSupport != other.VrsSupport) return false;
      if (ConstantBufferOffsetSupport != other.ConstantBufferOffsetSupport) return false;
      if (DrawIndirectSupport != other.DrawIndirectSupport) return false;
      if (MemoryGPU != other.MemoryGPU) return false;
      if (MemorySharedGPU != other.MemorySharedGPU) return false;
      if (GxAPI != other.GxAPI) return false;
      if (IsRetail != other.IsRetail) return false;
      if (IsPTRBeta != other.IsPTRBeta) return false;
      if (IsInternal != other.IsInternal) return false;
      if (SurveyVersion != other.SurveyVersion) return false;
      if (SurveyPatch != other.SurveyPatch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (realmInfo_ != null) hash ^= RealmInfo.GetHashCode();
      if (characterIdentity_ != null) hash ^= CharacterIdentity.GetHashCode();
      if (fileLocation_ != null) hash ^= FileLocation.GetHashCode();
      if (clientVersion_ != null) hash ^= ClientVersion.GetHashCode();
      if (HasCpuVendor) hash ^= CpuVendor.GetHashCode();
      if (HasCpuSocketCount) hash ^= CpuSocketCount.GetHashCode();
      if (HasCpuProcessorCount) hash ^= CpuProcessorCount.GetHashCode();
      if (HasCpuHardwareThreads) hash ^= CpuHardwareThreads.GetHashCode();
      if (HasCurrentArchitecture) hash ^= CurrentArchitecture.GetHashCode();
      if (HasSystemArchitecture) hash ^= SystemArchitecture.GetHashCode();
      if (HasIsX8664) hash ^= IsX8664.GetHashCode();
      if (HasIsArm64) hash ^= IsArm64.GetHashCode();
      if (HasHasX86SSE2) hash ^= HasX86SSE2.GetHashCode();
      if (HasHasX86SSE3) hash ^= HasX86SSE3.GetHashCode();
      if (HasHasX86SSE41) hash ^= HasX86SSE41.GetHashCode();
      if (HasHasX86AVX) hash ^= HasX86AVX.GetHashCode();
      if (HasHasX86SSE42) hash ^= HasX86SSE42.GetHashCode();
      if (HasHasX86AES) hash ^= HasX86AES.GetHashCode();
      if (HasHasX86CMPXCHG16B) hash ^= HasX86CMPXCHG16B.GetHashCode();
      if (HasHasX86RDRAND) hash ^= HasX86RDRAND.GetHashCode();
      if (HasHasX86POPCNT) hash ^= HasX86POPCNT.GetHashCode();
      if (HasHasX86F16C) hash ^= HasX86F16C.GetHashCode();
      if (HasHasX86FMA) hash ^= HasX86FMA.GetHashCode();
      if (HasHasX86AVX2) hash ^= HasX86AVX2.GetHashCode();
      if (HasHasX86AVX512) hash ^= HasX86AVX512.GetHashCode();
      if (HasHasArmCRYPTO) hash ^= HasArmCRYPTO.GetHashCode();
      if (HasOSVersion) hash ^= OSVersion.GetHashCode();
      if (HasIsWindows) hash ^= IsWindows.GetHashCode();
      if (HasIsWindowsServer) hash ^= IsWindowsServer.GetHashCode();
      if (HasIsWine) hash ^= IsWine.GetHashCode();
      if (HasIsMac) hash ^= IsMac.GetHashCode();
      if (HasBcOsVersionPlatform) hash ^= BcOsVersionPlatform.GetHashCode();
      if (HasBcOsVersionMajor) hash ^= BcOsVersionMajor.GetHashCode();
      if (HasBcOsVersionMinor) hash ^= BcOsVersionMinor.GetHashCode();
      if (HasBcOsVersionPatch) hash ^= BcOsVersionPatch.GetHashCode();
      if (HasBcOsVersionBuild) hash ^= BcOsVersionBuild.GetHashCode();
      if (HasMemoryCPU) hash ^= MemoryCPU.GetHashCode();
      if (HasRegion) hash ^= Region.GetHashCode();
      if (HasBnetLauncer) hash ^= BnetLauncer.GetHashCode();
      if (HasMonitorCount) hash ^= MonitorCount.GetHashCode();
      if (HasResolutionX) hash ^= ResolutionX.GetHashCode();
      if (HasResolutionY) hash ^= ResolutionY.GetHashCode();
      if (HasMonitorX) hash ^= MonitorX.GetHashCode();
      if (HasMonitorY) hash ^= MonitorY.GetHashCode();
      if (HasGpuVendorID) hash ^= GpuVendorID.GetHashCode();
      if (HasGpuDeviceID) hash ^= GpuDeviceID.GetHashCode();
      if (HasShaderFamily) hash ^= ShaderFamily.GetHashCode();
      if (HasHighestShaderModelSupported) hash ^= HighestShaderModelSupported.GetHashCode();
      if (HasRaytracingSupport) hash ^= RaytracingSupport.GetHashCode();
      if (HasVrsSupport) hash ^= VrsSupport.GetHashCode();
      if (HasConstantBufferOffsetSupport) hash ^= ConstantBufferOffsetSupport.GetHashCode();
      if (HasDrawIndirectSupport) hash ^= DrawIndirectSupport.GetHashCode();
      if (HasMemoryGPU) hash ^= MemoryGPU.GetHashCode();
      if (HasMemorySharedGPU) hash ^= MemorySharedGPU.GetHashCode();
      if (HasGxAPI) hash ^= GxAPI.GetHashCode();
      if (HasIsRetail) hash ^= IsRetail.GetHashCode();
      if (HasIsPTRBeta) hash ^= IsPTRBeta.GetHashCode();
      if (HasIsInternal) hash ^= IsInternal.GetHashCode();
      if (HasSurveyVersion) hash ^= SurveyVersion.GetHashCode();
      if (HasSurveyPatch) hash ^= SurveyPatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (realmInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RealmInfo);
      }
      if (characterIdentity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CharacterIdentity);
      }
      if (fileLocation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FileLocation);
      }
      if (clientVersion_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(ClientVersion);
      }
      if (HasCpuVendor) {
        output.WriteRawTag(200, 6);
        output.WriteUInt32(CpuVendor);
      }
      if (HasCpuSocketCount) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(CpuSocketCount);
      }
      if (HasCpuProcessorCount) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(CpuProcessorCount);
      }
      if (HasCpuHardwareThreads) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(CpuHardwareThreads);
      }
      if (HasCurrentArchitecture) {
        output.WriteRawTag(232, 6);
        output.WriteUInt32(CurrentArchitecture);
      }
      if (HasSystemArchitecture) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(SystemArchitecture);
      }
      if (HasIsX8664) {
        output.WriteRawTag(248, 6);
        output.WriteBool(IsX8664);
      }
      if (HasIsArm64) {
        output.WriteRawTag(128, 7);
        output.WriteBool(IsArm64);
      }
      if (HasHasX86SSE2) {
        output.WriteRawTag(136, 7);
        output.WriteBool(HasX86SSE2);
      }
      if (HasHasX86SSE3) {
        output.WriteRawTag(144, 7);
        output.WriteBool(HasX86SSE3);
      }
      if (HasHasX86SSE41) {
        output.WriteRawTag(152, 7);
        output.WriteBool(HasX86SSE41);
      }
      if (HasHasX86AVX) {
        output.WriteRawTag(160, 7);
        output.WriteBool(HasX86AVX);
      }
      if (HasHasX86SSE42) {
        output.WriteRawTag(168, 7);
        output.WriteBool(HasX86SSE42);
      }
      if (HasHasX86AES) {
        output.WriteRawTag(176, 7);
        output.WriteBool(HasX86AES);
      }
      if (HasHasX86CMPXCHG16B) {
        output.WriteRawTag(184, 7);
        output.WriteBool(HasX86CMPXCHG16B);
      }
      if (HasHasX86RDRAND) {
        output.WriteRawTag(192, 7);
        output.WriteBool(HasX86RDRAND);
      }
      if (HasHasX86POPCNT) {
        output.WriteRawTag(200, 7);
        output.WriteBool(HasX86POPCNT);
      }
      if (HasHasX86F16C) {
        output.WriteRawTag(208, 7);
        output.WriteBool(HasX86F16C);
      }
      if (HasHasX86FMA) {
        output.WriteRawTag(216, 7);
        output.WriteBool(HasX86FMA);
      }
      if (HasHasX86AVX2) {
        output.WriteRawTag(224, 7);
        output.WriteBool(HasX86AVX2);
      }
      if (HasHasX86AVX512) {
        output.WriteRawTag(232, 7);
        output.WriteBool(HasX86AVX512);
      }
      if (HasHasArmCRYPTO) {
        output.WriteRawTag(240, 7);
        output.WriteBool(HasArmCRYPTO);
      }
      if (HasOSVersion) {
        output.WriteRawTag(248, 7);
        output.WriteUInt32(OSVersion);
      }
      if (HasIsWindows) {
        output.WriteRawTag(128, 8);
        output.WriteBool(IsWindows);
      }
      if (HasIsWindowsServer) {
        output.WriteRawTag(136, 8);
        output.WriteBool(IsWindowsServer);
      }
      if (HasIsWine) {
        output.WriteRawTag(144, 8);
        output.WriteBool(IsWine);
      }
      if (HasIsMac) {
        output.WriteRawTag(152, 8);
        output.WriteBool(IsMac);
      }
      if (HasBcOsVersionPlatform) {
        output.WriteRawTag(160, 8);
        output.WriteUInt32(BcOsVersionPlatform);
      }
      if (HasBcOsVersionMajor) {
        output.WriteRawTag(168, 8);
        output.WriteUInt32(BcOsVersionMajor);
      }
      if (HasBcOsVersionMinor) {
        output.WriteRawTag(176, 8);
        output.WriteUInt32(BcOsVersionMinor);
      }
      if (HasBcOsVersionPatch) {
        output.WriteRawTag(184, 8);
        output.WriteUInt32(BcOsVersionPatch);
      }
      if (HasBcOsVersionBuild) {
        output.WriteRawTag(192, 8);
        output.WriteUInt32(BcOsVersionBuild);
      }
      if (HasMemoryCPU) {
        output.WriteRawTag(200, 8);
        output.WriteUInt64(MemoryCPU);
      }
      if (HasRegion) {
        output.WriteRawTag(208, 8);
        output.WriteUInt32(Region);
      }
      if (HasBnetLauncer) {
        output.WriteRawTag(216, 8);
        output.WriteUInt32(BnetLauncer);
      }
      if (HasMonitorCount) {
        output.WriteRawTag(224, 8);
        output.WriteUInt32(MonitorCount);
      }
      if (HasResolutionX) {
        output.WriteRawTag(232, 8);
        output.WriteUInt32(ResolutionX);
      }
      if (HasResolutionY) {
        output.WriteRawTag(240, 8);
        output.WriteUInt32(ResolutionY);
      }
      if (HasMonitorX) {
        output.WriteRawTag(248, 8);
        output.WriteUInt32(MonitorX);
      }
      if (HasMonitorY) {
        output.WriteRawTag(128, 9);
        output.WriteUInt32(MonitorY);
      }
      if (HasGpuVendorID) {
        output.WriteRawTag(136, 9);
        output.WriteUInt32(GpuVendorID);
      }
      if (HasGpuDeviceID) {
        output.WriteRawTag(144, 9);
        output.WriteUInt32(GpuDeviceID);
      }
      if (HasShaderFamily) {
        output.WriteRawTag(152, 9);
        output.WriteUInt32(ShaderFamily);
      }
      if (HasHighestShaderModelSupported) {
        output.WriteRawTag(160, 9);
        output.WriteUInt32(HighestShaderModelSupported);
      }
      if (HasRaytracingSupport) {
        output.WriteRawTag(168, 9);
        output.WriteUInt32(RaytracingSupport);
      }
      if (HasVrsSupport) {
        output.WriteRawTag(176, 9);
        output.WriteUInt32(VrsSupport);
      }
      if (HasConstantBufferOffsetSupport) {
        output.WriteRawTag(184, 9);
        output.WriteBool(ConstantBufferOffsetSupport);
      }
      if (HasDrawIndirectSupport) {
        output.WriteRawTag(192, 9);
        output.WriteBool(DrawIndirectSupport);
      }
      if (HasMemoryGPU) {
        output.WriteRawTag(200, 9);
        output.WriteUInt64(MemoryGPU);
      }
      if (HasMemorySharedGPU) {
        output.WriteRawTag(208, 9);
        output.WriteUInt64(MemorySharedGPU);
      }
      if (HasGxAPI) {
        output.WriteRawTag(216, 9);
        output.WriteUInt32(GxAPI);
      }
      if (HasIsRetail) {
        output.WriteRawTag(224, 9);
        output.WriteBool(IsRetail);
      }
      if (HasIsPTRBeta) {
        output.WriteRawTag(232, 9);
        output.WriteBool(IsPTRBeta);
      }
      if (HasIsInternal) {
        output.WriteRawTag(240, 9);
        output.WriteBool(IsInternal);
      }
      if (HasSurveyVersion) {
        output.WriteRawTag(248, 9);
        output.WriteUInt32(SurveyVersion);
      }
      if (HasSurveyPatch) {
        output.WriteRawTag(128, 10);
        output.WriteUInt32(SurveyPatch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (realmInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RealmInfo);
      }
      if (characterIdentity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CharacterIdentity);
      }
      if (fileLocation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FileLocation);
      }
      if (clientVersion_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(ClientVersion);
      }
      if (HasCpuVendor) {
        output.WriteRawTag(200, 6);
        output.WriteUInt32(CpuVendor);
      }
      if (HasCpuSocketCount) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(CpuSocketCount);
      }
      if (HasCpuProcessorCount) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(CpuProcessorCount);
      }
      if (HasCpuHardwareThreads) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(CpuHardwareThreads);
      }
      if (HasCurrentArchitecture) {
        output.WriteRawTag(232, 6);
        output.WriteUInt32(CurrentArchitecture);
      }
      if (HasSystemArchitecture) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(SystemArchitecture);
      }
      if (HasIsX8664) {
        output.WriteRawTag(248, 6);
        output.WriteBool(IsX8664);
      }
      if (HasIsArm64) {
        output.WriteRawTag(128, 7);
        output.WriteBool(IsArm64);
      }
      if (HasHasX86SSE2) {
        output.WriteRawTag(136, 7);
        output.WriteBool(HasX86SSE2);
      }
      if (HasHasX86SSE3) {
        output.WriteRawTag(144, 7);
        output.WriteBool(HasX86SSE3);
      }
      if (HasHasX86SSE41) {
        output.WriteRawTag(152, 7);
        output.WriteBool(HasX86SSE41);
      }
      if (HasHasX86AVX) {
        output.WriteRawTag(160, 7);
        output.WriteBool(HasX86AVX);
      }
      if (HasHasX86SSE42) {
        output.WriteRawTag(168, 7);
        output.WriteBool(HasX86SSE42);
      }
      if (HasHasX86AES) {
        output.WriteRawTag(176, 7);
        output.WriteBool(HasX86AES);
      }
      if (HasHasX86CMPXCHG16B) {
        output.WriteRawTag(184, 7);
        output.WriteBool(HasX86CMPXCHG16B);
      }
      if (HasHasX86RDRAND) {
        output.WriteRawTag(192, 7);
        output.WriteBool(HasX86RDRAND);
      }
      if (HasHasX86POPCNT) {
        output.WriteRawTag(200, 7);
        output.WriteBool(HasX86POPCNT);
      }
      if (HasHasX86F16C) {
        output.WriteRawTag(208, 7);
        output.WriteBool(HasX86F16C);
      }
      if (HasHasX86FMA) {
        output.WriteRawTag(216, 7);
        output.WriteBool(HasX86FMA);
      }
      if (HasHasX86AVX2) {
        output.WriteRawTag(224, 7);
        output.WriteBool(HasX86AVX2);
      }
      if (HasHasX86AVX512) {
        output.WriteRawTag(232, 7);
        output.WriteBool(HasX86AVX512);
      }
      if (HasHasArmCRYPTO) {
        output.WriteRawTag(240, 7);
        output.WriteBool(HasArmCRYPTO);
      }
      if (HasOSVersion) {
        output.WriteRawTag(248, 7);
        output.WriteUInt32(OSVersion);
      }
      if (HasIsWindows) {
        output.WriteRawTag(128, 8);
        output.WriteBool(IsWindows);
      }
      if (HasIsWindowsServer) {
        output.WriteRawTag(136, 8);
        output.WriteBool(IsWindowsServer);
      }
      if (HasIsWine) {
        output.WriteRawTag(144, 8);
        output.WriteBool(IsWine);
      }
      if (HasIsMac) {
        output.WriteRawTag(152, 8);
        output.WriteBool(IsMac);
      }
      if (HasBcOsVersionPlatform) {
        output.WriteRawTag(160, 8);
        output.WriteUInt32(BcOsVersionPlatform);
      }
      if (HasBcOsVersionMajor) {
        output.WriteRawTag(168, 8);
        output.WriteUInt32(BcOsVersionMajor);
      }
      if (HasBcOsVersionMinor) {
        output.WriteRawTag(176, 8);
        output.WriteUInt32(BcOsVersionMinor);
      }
      if (HasBcOsVersionPatch) {
        output.WriteRawTag(184, 8);
        output.WriteUInt32(BcOsVersionPatch);
      }
      if (HasBcOsVersionBuild) {
        output.WriteRawTag(192, 8);
        output.WriteUInt32(BcOsVersionBuild);
      }
      if (HasMemoryCPU) {
        output.WriteRawTag(200, 8);
        output.WriteUInt64(MemoryCPU);
      }
      if (HasRegion) {
        output.WriteRawTag(208, 8);
        output.WriteUInt32(Region);
      }
      if (HasBnetLauncer) {
        output.WriteRawTag(216, 8);
        output.WriteUInt32(BnetLauncer);
      }
      if (HasMonitorCount) {
        output.WriteRawTag(224, 8);
        output.WriteUInt32(MonitorCount);
      }
      if (HasResolutionX) {
        output.WriteRawTag(232, 8);
        output.WriteUInt32(ResolutionX);
      }
      if (HasResolutionY) {
        output.WriteRawTag(240, 8);
        output.WriteUInt32(ResolutionY);
      }
      if (HasMonitorX) {
        output.WriteRawTag(248, 8);
        output.WriteUInt32(MonitorX);
      }
      if (HasMonitorY) {
        output.WriteRawTag(128, 9);
        output.WriteUInt32(MonitorY);
      }
      if (HasGpuVendorID) {
        output.WriteRawTag(136, 9);
        output.WriteUInt32(GpuVendorID);
      }
      if (HasGpuDeviceID) {
        output.WriteRawTag(144, 9);
        output.WriteUInt32(GpuDeviceID);
      }
      if (HasShaderFamily) {
        output.WriteRawTag(152, 9);
        output.WriteUInt32(ShaderFamily);
      }
      if (HasHighestShaderModelSupported) {
        output.WriteRawTag(160, 9);
        output.WriteUInt32(HighestShaderModelSupported);
      }
      if (HasRaytracingSupport) {
        output.WriteRawTag(168, 9);
        output.WriteUInt32(RaytracingSupport);
      }
      if (HasVrsSupport) {
        output.WriteRawTag(176, 9);
        output.WriteUInt32(VrsSupport);
      }
      if (HasConstantBufferOffsetSupport) {
        output.WriteRawTag(184, 9);
        output.WriteBool(ConstantBufferOffsetSupport);
      }
      if (HasDrawIndirectSupport) {
        output.WriteRawTag(192, 9);
        output.WriteBool(DrawIndirectSupport);
      }
      if (HasMemoryGPU) {
        output.WriteRawTag(200, 9);
        output.WriteUInt64(MemoryGPU);
      }
      if (HasMemorySharedGPU) {
        output.WriteRawTag(208, 9);
        output.WriteUInt64(MemorySharedGPU);
      }
      if (HasGxAPI) {
        output.WriteRawTag(216, 9);
        output.WriteUInt32(GxAPI);
      }
      if (HasIsRetail) {
        output.WriteRawTag(224, 9);
        output.WriteBool(IsRetail);
      }
      if (HasIsPTRBeta) {
        output.WriteRawTag(232, 9);
        output.WriteBool(IsPTRBeta);
      }
      if (HasIsInternal) {
        output.WriteRawTag(240, 9);
        output.WriteBool(IsInternal);
      }
      if (HasSurveyVersion) {
        output.WriteRawTag(248, 9);
        output.WriteUInt32(SurveyVersion);
      }
      if (HasSurveyPatch) {
        output.WriteRawTag(128, 10);
        output.WriteUInt32(SurveyPatch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (realmInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RealmInfo);
      }
      if (characterIdentity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharacterIdentity);
      }
      if (fileLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FileLocation);
      }
      if (clientVersion_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClientVersion);
      }
      if (HasCpuVendor) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CpuVendor);
      }
      if (HasCpuSocketCount) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CpuSocketCount);
      }
      if (HasCpuProcessorCount) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CpuProcessorCount);
      }
      if (HasCpuHardwareThreads) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CpuHardwareThreads);
      }
      if (HasCurrentArchitecture) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurrentArchitecture);
      }
      if (HasSystemArchitecture) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SystemArchitecture);
      }
      if (HasIsX8664) {
        size += 2 + 1;
      }
      if (HasIsArm64) {
        size += 2 + 1;
      }
      if (HasHasX86SSE2) {
        size += 2 + 1;
      }
      if (HasHasX86SSE3) {
        size += 2 + 1;
      }
      if (HasHasX86SSE41) {
        size += 2 + 1;
      }
      if (HasHasX86AVX) {
        size += 2 + 1;
      }
      if (HasHasX86SSE42) {
        size += 2 + 1;
      }
      if (HasHasX86AES) {
        size += 2 + 1;
      }
      if (HasHasX86CMPXCHG16B) {
        size += 2 + 1;
      }
      if (HasHasX86RDRAND) {
        size += 2 + 1;
      }
      if (HasHasX86POPCNT) {
        size += 2 + 1;
      }
      if (HasHasX86F16C) {
        size += 2 + 1;
      }
      if (HasHasX86FMA) {
        size += 2 + 1;
      }
      if (HasHasX86AVX2) {
        size += 2 + 1;
      }
      if (HasHasX86AVX512) {
        size += 2 + 1;
      }
      if (HasHasArmCRYPTO) {
        size += 2 + 1;
      }
      if (HasOSVersion) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OSVersion);
      }
      if (HasIsWindows) {
        size += 2 + 1;
      }
      if (HasIsWindowsServer) {
        size += 2 + 1;
      }
      if (HasIsWine) {
        size += 2 + 1;
      }
      if (HasIsMac) {
        size += 2 + 1;
      }
      if (HasBcOsVersionPlatform) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BcOsVersionPlatform);
      }
      if (HasBcOsVersionMajor) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BcOsVersionMajor);
      }
      if (HasBcOsVersionMinor) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BcOsVersionMinor);
      }
      if (HasBcOsVersionPatch) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BcOsVersionPatch);
      }
      if (HasBcOsVersionBuild) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BcOsVersionBuild);
      }
      if (HasMemoryCPU) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MemoryCPU);
      }
      if (HasRegion) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Region);
      }
      if (HasBnetLauncer) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BnetLauncer);
      }
      if (HasMonitorCount) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MonitorCount);
      }
      if (HasResolutionX) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResolutionX);
      }
      if (HasResolutionY) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResolutionY);
      }
      if (HasMonitorX) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MonitorX);
      }
      if (HasMonitorY) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MonitorY);
      }
      if (HasGpuVendorID) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GpuVendorID);
      }
      if (HasGpuDeviceID) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GpuDeviceID);
      }
      if (HasShaderFamily) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ShaderFamily);
      }
      if (HasHighestShaderModelSupported) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HighestShaderModelSupported);
      }
      if (HasRaytracingSupport) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RaytracingSupport);
      }
      if (HasVrsSupport) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VrsSupport);
      }
      if (HasConstantBufferOffsetSupport) {
        size += 2 + 1;
      }
      if (HasDrawIndirectSupport) {
        size += 2 + 1;
      }
      if (HasMemoryGPU) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MemoryGPU);
      }
      if (HasMemorySharedGPU) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MemorySharedGPU);
      }
      if (HasGxAPI) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GxAPI);
      }
      if (HasIsRetail) {
        size += 2 + 1;
      }
      if (HasIsPTRBeta) {
        size += 2 + 1;
      }
      if (HasIsInternal) {
        size += 2 + 1;
      }
      if (HasSurveyVersion) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SurveyVersion);
      }
      if (HasSurveyPatch) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SurveyPatch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ClientEngineLogV2 other) {
      if (other == null) {
        return;
      }
      if (other.realmInfo_ != null) {
        if (realmInfo_ == null) {
          RealmInfo = new global::Blizzard.Telemetry.Wow.RealmInfo();
        }
        RealmInfo.MergeFrom(other.RealmInfo);
      }
      if (other.characterIdentity_ != null) {
        if (characterIdentity_ == null) {
          CharacterIdentity = new global::Blizzard.Telemetry.Wow.CharacterIdentity();
        }
        CharacterIdentity.MergeFrom(other.CharacterIdentity);
      }
      if (other.fileLocation_ != null) {
        if (fileLocation_ == null) {
          FileLocation = new global::Blizzard.Telemetry.Wow.FileLocation();
        }
        FileLocation.MergeFrom(other.FileLocation);
      }
      if (other.clientVersion_ != null) {
        if (clientVersion_ == null) {
          ClientVersion = new global::Blizzard.Telemetry.Wow.WowClientVersion();
        }
        ClientVersion.MergeFrom(other.ClientVersion);
      }
      if (other.HasCpuVendor) {
        CpuVendor = other.CpuVendor;
      }
      if (other.HasCpuSocketCount) {
        CpuSocketCount = other.CpuSocketCount;
      }
      if (other.HasCpuProcessorCount) {
        CpuProcessorCount = other.CpuProcessorCount;
      }
      if (other.HasCpuHardwareThreads) {
        CpuHardwareThreads = other.CpuHardwareThreads;
      }
      if (other.HasCurrentArchitecture) {
        CurrentArchitecture = other.CurrentArchitecture;
      }
      if (other.HasSystemArchitecture) {
        SystemArchitecture = other.SystemArchitecture;
      }
      if (other.HasIsX8664) {
        IsX8664 = other.IsX8664;
      }
      if (other.HasIsArm64) {
        IsArm64 = other.IsArm64;
      }
      if (other.HasHasX86SSE2) {
        HasX86SSE2 = other.HasX86SSE2;
      }
      if (other.HasHasX86SSE3) {
        HasX86SSE3 = other.HasX86SSE3;
      }
      if (other.HasHasX86SSE41) {
        HasX86SSE41 = other.HasX86SSE41;
      }
      if (other.HasHasX86AVX) {
        HasX86AVX = other.HasX86AVX;
      }
      if (other.HasHasX86SSE42) {
        HasX86SSE42 = other.HasX86SSE42;
      }
      if (other.HasHasX86AES) {
        HasX86AES = other.HasX86AES;
      }
      if (other.HasHasX86CMPXCHG16B) {
        HasX86CMPXCHG16B = other.HasX86CMPXCHG16B;
      }
      if (other.HasHasX86RDRAND) {
        HasX86RDRAND = other.HasX86RDRAND;
      }
      if (other.HasHasX86POPCNT) {
        HasX86POPCNT = other.HasX86POPCNT;
      }
      if (other.HasHasX86F16C) {
        HasX86F16C = other.HasX86F16C;
      }
      if (other.HasHasX86FMA) {
        HasX86FMA = other.HasX86FMA;
      }
      if (other.HasHasX86AVX2) {
        HasX86AVX2 = other.HasX86AVX2;
      }
      if (other.HasHasX86AVX512) {
        HasX86AVX512 = other.HasX86AVX512;
      }
      if (other.HasHasArmCRYPTO) {
        HasArmCRYPTO = other.HasArmCRYPTO;
      }
      if (other.HasOSVersion) {
        OSVersion = other.OSVersion;
      }
      if (other.HasIsWindows) {
        IsWindows = other.IsWindows;
      }
      if (other.HasIsWindowsServer) {
        IsWindowsServer = other.IsWindowsServer;
      }
      if (other.HasIsWine) {
        IsWine = other.IsWine;
      }
      if (other.HasIsMac) {
        IsMac = other.IsMac;
      }
      if (other.HasBcOsVersionPlatform) {
        BcOsVersionPlatform = other.BcOsVersionPlatform;
      }
      if (other.HasBcOsVersionMajor) {
        BcOsVersionMajor = other.BcOsVersionMajor;
      }
      if (other.HasBcOsVersionMinor) {
        BcOsVersionMinor = other.BcOsVersionMinor;
      }
      if (other.HasBcOsVersionPatch) {
        BcOsVersionPatch = other.BcOsVersionPatch;
      }
      if (other.HasBcOsVersionBuild) {
        BcOsVersionBuild = other.BcOsVersionBuild;
      }
      if (other.HasMemoryCPU) {
        MemoryCPU = other.MemoryCPU;
      }
      if (other.HasRegion) {
        Region = other.Region;
      }
      if (other.HasBnetLauncer) {
        BnetLauncer = other.BnetLauncer;
      }
      if (other.HasMonitorCount) {
        MonitorCount = other.MonitorCount;
      }
      if (other.HasResolutionX) {
        ResolutionX = other.ResolutionX;
      }
      if (other.HasResolutionY) {
        ResolutionY = other.ResolutionY;
      }
      if (other.HasMonitorX) {
        MonitorX = other.MonitorX;
      }
      if (other.HasMonitorY) {
        MonitorY = other.MonitorY;
      }
      if (other.HasGpuVendorID) {
        GpuVendorID = other.GpuVendorID;
      }
      if (other.HasGpuDeviceID) {
        GpuDeviceID = other.GpuDeviceID;
      }
      if (other.HasShaderFamily) {
        ShaderFamily = other.ShaderFamily;
      }
      if (other.HasHighestShaderModelSupported) {
        HighestShaderModelSupported = other.HighestShaderModelSupported;
      }
      if (other.HasRaytracingSupport) {
        RaytracingSupport = other.RaytracingSupport;
      }
      if (other.HasVrsSupport) {
        VrsSupport = other.VrsSupport;
      }
      if (other.HasConstantBufferOffsetSupport) {
        ConstantBufferOffsetSupport = other.ConstantBufferOffsetSupport;
      }
      if (other.HasDrawIndirectSupport) {
        DrawIndirectSupport = other.DrawIndirectSupport;
      }
      if (other.HasMemoryGPU) {
        MemoryGPU = other.MemoryGPU;
      }
      if (other.HasMemorySharedGPU) {
        MemorySharedGPU = other.MemorySharedGPU;
      }
      if (other.HasGxAPI) {
        GxAPI = other.GxAPI;
      }
      if (other.HasIsRetail) {
        IsRetail = other.IsRetail;
      }
      if (other.HasIsPTRBeta) {
        IsPTRBeta = other.IsPTRBeta;
      }
      if (other.HasIsInternal) {
        IsInternal = other.IsInternal;
      }
      if (other.HasSurveyVersion) {
        SurveyVersion = other.SurveyVersion;
      }
      if (other.HasSurveyPatch) {
        SurveyPatch = other.SurveyPatch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (realmInfo_ == null) {
              RealmInfo = new global::Blizzard.Telemetry.Wow.RealmInfo();
            }
            input.ReadMessage(RealmInfo);
            break;
          }
          case 18: {
            if (characterIdentity_ == null) {
              CharacterIdentity = new global::Blizzard.Telemetry.Wow.CharacterIdentity();
            }
            input.ReadMessage(CharacterIdentity);
            break;
          }
          case 26: {
            if (fileLocation_ == null) {
              FileLocation = new global::Blizzard.Telemetry.Wow.FileLocation();
            }
            input.ReadMessage(FileLocation);
            break;
          }
          case 834: {
            if (clientVersion_ == null) {
              ClientVersion = new global::Blizzard.Telemetry.Wow.WowClientVersion();
            }
            input.ReadMessage(ClientVersion);
            break;
          }
          case 840: {
            CpuVendor = input.ReadUInt32();
            break;
          }
          case 848: {
            CpuSocketCount = input.ReadUInt32();
            break;
          }
          case 856: {
            CpuProcessorCount = input.ReadUInt32();
            break;
          }
          case 864: {
            CpuHardwareThreads = input.ReadUInt32();
            break;
          }
          case 872: {
            CurrentArchitecture = input.ReadUInt32();
            break;
          }
          case 880: {
            SystemArchitecture = input.ReadUInt32();
            break;
          }
          case 888: {
            IsX8664 = input.ReadBool();
            break;
          }
          case 896: {
            IsArm64 = input.ReadBool();
            break;
          }
          case 904: {
            HasX86SSE2 = input.ReadBool();
            break;
          }
          case 912: {
            HasX86SSE3 = input.ReadBool();
            break;
          }
          case 920: {
            HasX86SSE41 = input.ReadBool();
            break;
          }
          case 928: {
            HasX86AVX = input.ReadBool();
            break;
          }
          case 936: {
            HasX86SSE42 = input.ReadBool();
            break;
          }
          case 944: {
            HasX86AES = input.ReadBool();
            break;
          }
          case 952: {
            HasX86CMPXCHG16B = input.ReadBool();
            break;
          }
          case 960: {
            HasX86RDRAND = input.ReadBool();
            break;
          }
          case 968: {
            HasX86POPCNT = input.ReadBool();
            break;
          }
          case 976: {
            HasX86F16C = input.ReadBool();
            break;
          }
          case 984: {
            HasX86FMA = input.ReadBool();
            break;
          }
          case 992: {
            HasX86AVX2 = input.ReadBool();
            break;
          }
          case 1000: {
            HasX86AVX512 = input.ReadBool();
            break;
          }
          case 1008: {
            HasArmCRYPTO = input.ReadBool();
            break;
          }
          case 1016: {
            OSVersion = input.ReadUInt32();
            break;
          }
          case 1024: {
            IsWindows = input.ReadBool();
            break;
          }
          case 1032: {
            IsWindowsServer = input.ReadBool();
            break;
          }
          case 1040: {
            IsWine = input.ReadBool();
            break;
          }
          case 1048: {
            IsMac = input.ReadBool();
            break;
          }
          case 1056: {
            BcOsVersionPlatform = input.ReadUInt32();
            break;
          }
          case 1064: {
            BcOsVersionMajor = input.ReadUInt32();
            break;
          }
          case 1072: {
            BcOsVersionMinor = input.ReadUInt32();
            break;
          }
          case 1080: {
            BcOsVersionPatch = input.ReadUInt32();
            break;
          }
          case 1088: {
            BcOsVersionBuild = input.ReadUInt32();
            break;
          }
          case 1096: {
            MemoryCPU = input.ReadUInt64();
            break;
          }
          case 1104: {
            Region = input.ReadUInt32();
            break;
          }
          case 1112: {
            BnetLauncer = input.ReadUInt32();
            break;
          }
          case 1120: {
            MonitorCount = input.ReadUInt32();
            break;
          }
          case 1128: {
            ResolutionX = input.ReadUInt32();
            break;
          }
          case 1136: {
            ResolutionY = input.ReadUInt32();
            break;
          }
          case 1144: {
            MonitorX = input.ReadUInt32();
            break;
          }
          case 1152: {
            MonitorY = input.ReadUInt32();
            break;
          }
          case 1160: {
            GpuVendorID = input.ReadUInt32();
            break;
          }
          case 1168: {
            GpuDeviceID = input.ReadUInt32();
            break;
          }
          case 1176: {
            ShaderFamily = input.ReadUInt32();
            break;
          }
          case 1184: {
            HighestShaderModelSupported = input.ReadUInt32();
            break;
          }
          case 1192: {
            RaytracingSupport = input.ReadUInt32();
            break;
          }
          case 1200: {
            VrsSupport = input.ReadUInt32();
            break;
          }
          case 1208: {
            ConstantBufferOffsetSupport = input.ReadBool();
            break;
          }
          case 1216: {
            DrawIndirectSupport = input.ReadBool();
            break;
          }
          case 1224: {
            MemoryGPU = input.ReadUInt64();
            break;
          }
          case 1232: {
            MemorySharedGPU = input.ReadUInt64();
            break;
          }
          case 1240: {
            GxAPI = input.ReadUInt32();
            break;
          }
          case 1248: {
            IsRetail = input.ReadBool();
            break;
          }
          case 1256: {
            IsPTRBeta = input.ReadBool();
            break;
          }
          case 1264: {
            IsInternal = input.ReadBool();
            break;
          }
          case 1272: {
            SurveyVersion = input.ReadUInt32();
            break;
          }
          case 1280: {
            SurveyPatch = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (realmInfo_ == null) {
              RealmInfo = new global::Blizzard.Telemetry.Wow.RealmInfo();
            }
            input.ReadMessage(RealmInfo);
            break;
          }
          case 18: {
            if (characterIdentity_ == null) {
              CharacterIdentity = new global::Blizzard.Telemetry.Wow.CharacterIdentity();
            }
            input.ReadMessage(CharacterIdentity);
            break;
          }
          case 26: {
            if (fileLocation_ == null) {
              FileLocation = new global::Blizzard.Telemetry.Wow.FileLocation();
            }
            input.ReadMessage(FileLocation);
            break;
          }
          case 834: {
            if (clientVersion_ == null) {
              ClientVersion = new global::Blizzard.Telemetry.Wow.WowClientVersion();
            }
            input.ReadMessage(ClientVersion);
            break;
          }
          case 840: {
            CpuVendor = input.ReadUInt32();
            break;
          }
          case 848: {
            CpuSocketCount = input.ReadUInt32();
            break;
          }
          case 856: {
            CpuProcessorCount = input.ReadUInt32();
            break;
          }
          case 864: {
            CpuHardwareThreads = input.ReadUInt32();
            break;
          }
          case 872: {
            CurrentArchitecture = input.ReadUInt32();
            break;
          }
          case 880: {
            SystemArchitecture = input.ReadUInt32();
            break;
          }
          case 888: {
            IsX8664 = input.ReadBool();
            break;
          }
          case 896: {
            IsArm64 = input.ReadBool();
            break;
          }
          case 904: {
            HasX86SSE2 = input.ReadBool();
            break;
          }
          case 912: {
            HasX86SSE3 = input.ReadBool();
            break;
          }
          case 920: {
            HasX86SSE41 = input.ReadBool();
            break;
          }
          case 928: {
            HasX86AVX = input.ReadBool();
            break;
          }
          case 936: {
            HasX86SSE42 = input.ReadBool();
            break;
          }
          case 944: {
            HasX86AES = input.ReadBool();
            break;
          }
          case 952: {
            HasX86CMPXCHG16B = input.ReadBool();
            break;
          }
          case 960: {
            HasX86RDRAND = input.ReadBool();
            break;
          }
          case 968: {
            HasX86POPCNT = input.ReadBool();
            break;
          }
          case 976: {
            HasX86F16C = input.ReadBool();
            break;
          }
          case 984: {
            HasX86FMA = input.ReadBool();
            break;
          }
          case 992: {
            HasX86AVX2 = input.ReadBool();
            break;
          }
          case 1000: {
            HasX86AVX512 = input.ReadBool();
            break;
          }
          case 1008: {
            HasArmCRYPTO = input.ReadBool();
            break;
          }
          case 1016: {
            OSVersion = input.ReadUInt32();
            break;
          }
          case 1024: {
            IsWindows = input.ReadBool();
            break;
          }
          case 1032: {
            IsWindowsServer = input.ReadBool();
            break;
          }
          case 1040: {
            IsWine = input.ReadBool();
            break;
          }
          case 1048: {
            IsMac = input.ReadBool();
            break;
          }
          case 1056: {
            BcOsVersionPlatform = input.ReadUInt32();
            break;
          }
          case 1064: {
            BcOsVersionMajor = input.ReadUInt32();
            break;
          }
          case 1072: {
            BcOsVersionMinor = input.ReadUInt32();
            break;
          }
          case 1080: {
            BcOsVersionPatch = input.ReadUInt32();
            break;
          }
          case 1088: {
            BcOsVersionBuild = input.ReadUInt32();
            break;
          }
          case 1096: {
            MemoryCPU = input.ReadUInt64();
            break;
          }
          case 1104: {
            Region = input.ReadUInt32();
            break;
          }
          case 1112: {
            BnetLauncer = input.ReadUInt32();
            break;
          }
          case 1120: {
            MonitorCount = input.ReadUInt32();
            break;
          }
          case 1128: {
            ResolutionX = input.ReadUInt32();
            break;
          }
          case 1136: {
            ResolutionY = input.ReadUInt32();
            break;
          }
          case 1144: {
            MonitorX = input.ReadUInt32();
            break;
          }
          case 1152: {
            MonitorY = input.ReadUInt32();
            break;
          }
          case 1160: {
            GpuVendorID = input.ReadUInt32();
            break;
          }
          case 1168: {
            GpuDeviceID = input.ReadUInt32();
            break;
          }
          case 1176: {
            ShaderFamily = input.ReadUInt32();
            break;
          }
          case 1184: {
            HighestShaderModelSupported = input.ReadUInt32();
            break;
          }
          case 1192: {
            RaytracingSupport = input.ReadUInt32();
            break;
          }
          case 1200: {
            VrsSupport = input.ReadUInt32();
            break;
          }
          case 1208: {
            ConstantBufferOffsetSupport = input.ReadBool();
            break;
          }
          case 1216: {
            DrawIndirectSupport = input.ReadBool();
            break;
          }
          case 1224: {
            MemoryGPU = input.ReadUInt64();
            break;
          }
          case 1232: {
            MemorySharedGPU = input.ReadUInt64();
            break;
          }
          case 1240: {
            GxAPI = input.ReadUInt32();
            break;
          }
          case 1248: {
            IsRetail = input.ReadBool();
            break;
          }
          case 1256: {
            IsPTRBeta = input.ReadBool();
            break;
          }
          case 1264: {
            IsInternal = input.ReadBool();
            break;
          }
          case 1272: {
            SurveyVersion = input.ReadUInt32();
            break;
          }
          case 1280: {
            SurveyPatch = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class KeybindingExecutionCountsFromClient : pb::IMessage<KeybindingExecutionCountsFromClient>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<KeybindingExecutionCountsFromClient> _parser = new pb::MessageParser<KeybindingExecutionCountsFromClient>(() => new KeybindingExecutionCountsFromClient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<KeybindingExecutionCountsFromClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Blizzard.Telemetry.Wow.Client.ClientSharedReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public KeybindingExecutionCountsFromClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public KeybindingExecutionCountsFromClient(KeybindingExecutionCountsFromClient other) : this() {
      characterIdentity_ = other.characterIdentity_ != null ? other.characterIdentity_.Clone() : null;
      keybindingExecutionCounts_ = other.keybindingExecutionCounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public KeybindingExecutionCountsFromClient Clone() {
      return new KeybindingExecutionCountsFromClient(this);
    }

    /// <summary>Field number for the "character_identity" field.</summary>
    public const int CharacterIdentityFieldNumber = 1;
    private global::Blizzard.Telemetry.Wow.CharacterIdentity characterIdentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blizzard.Telemetry.Wow.CharacterIdentity CharacterIdentity {
      get { return characterIdentity_; }
      set {
        characterIdentity_ = value;
      }
    }

    /// <summary>Field number for the "keybindingExecutionCounts" field.</summary>
    public const int KeybindingExecutionCountsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Blizzard.Telemetry.Wow.ClientKeybindExecutionCount> _repeated_keybindingExecutionCounts_codec
        = pb::FieldCodec.ForMessage(18, global::Blizzard.Telemetry.Wow.ClientKeybindExecutionCount.Parser);
    private readonly pbc::RepeatedField<global::Blizzard.Telemetry.Wow.ClientKeybindExecutionCount> keybindingExecutionCounts_ = new pbc::RepeatedField<global::Blizzard.Telemetry.Wow.ClientKeybindExecutionCount>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Blizzard.Telemetry.Wow.ClientKeybindExecutionCount> KeybindingExecutionCounts {
      get { return keybindingExecutionCounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as KeybindingExecutionCountsFromClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(KeybindingExecutionCountsFromClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CharacterIdentity, other.CharacterIdentity)) return false;
      if(!keybindingExecutionCounts_.Equals(other.keybindingExecutionCounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (characterIdentity_ != null) hash ^= CharacterIdentity.GetHashCode();
      hash ^= keybindingExecutionCounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (characterIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CharacterIdentity);
      }
      keybindingExecutionCounts_.WriteTo(output, _repeated_keybindingExecutionCounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (characterIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CharacterIdentity);
      }
      keybindingExecutionCounts_.WriteTo(ref output, _repeated_keybindingExecutionCounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (characterIdentity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharacterIdentity);
      }
      size += keybindingExecutionCounts_.CalculateSize(_repeated_keybindingExecutionCounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(KeybindingExecutionCountsFromClient other) {
      if (other == null) {
        return;
      }
      if (other.characterIdentity_ != null) {
        if (characterIdentity_ == null) {
          CharacterIdentity = new global::Blizzard.Telemetry.Wow.CharacterIdentity();
        }
        CharacterIdentity.MergeFrom(other.CharacterIdentity);
      }
      keybindingExecutionCounts_.Add(other.keybindingExecutionCounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (characterIdentity_ == null) {
              CharacterIdentity = new global::Blizzard.Telemetry.Wow.CharacterIdentity();
            }
            input.ReadMessage(CharacterIdentity);
            break;
          }
          case 18: {
            keybindingExecutionCounts_.AddEntriesFrom(input, _repeated_keybindingExecutionCounts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (characterIdentity_ == null) {
              CharacterIdentity = new global::Blizzard.Telemetry.Wow.CharacterIdentity();
            }
            input.ReadMessage(CharacterIdentity);
            break;
          }
          case 18: {
            keybindingExecutionCounts_.AddEntriesFrom(ref input, _repeated_keybindingExecutionCounts_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CVarsFromClient : pb::IMessage<CVarsFromClient>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CVarsFromClient> _parser = new pb::MessageParser<CVarsFromClient>(() => new CVarsFromClient());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CVarsFromClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Blizzard.Telemetry.Wow.Client.ClientSharedReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CVarsFromClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CVarsFromClient(CVarsFromClient other) : this() {
      _hasBits0 = other._hasBits0;
      characterIdentity_ = other.characterIdentity_ != null ? other.characterIdentity_.Clone() : null;
      cvars_ = other.cvars_.Clone();
      page_ = other.page_;
      lastPage_ = other.lastPage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CVarsFromClient Clone() {
      return new CVarsFromClient(this);
    }

    /// <summary>Field number for the "character_identity" field.</summary>
    public const int CharacterIdentityFieldNumber = 1;
    private global::Blizzard.Telemetry.Wow.CharacterIdentity characterIdentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blizzard.Telemetry.Wow.CharacterIdentity CharacterIdentity {
      get { return characterIdentity_; }
      set {
        characterIdentity_ = value;
      }
    }

    /// <summary>Field number for the "cvars" field.</summary>
    public const int CvarsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Blizzard.Telemetry.Wow.ClientCVar> _repeated_cvars_codec
        = pb::FieldCodec.ForMessage(18, global::Blizzard.Telemetry.Wow.ClientCVar.Parser);
    private readonly pbc::RepeatedField<global::Blizzard.Telemetry.Wow.ClientCVar> cvars_ = new pbc::RepeatedField<global::Blizzard.Telemetry.Wow.ClientCVar>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Blizzard.Telemetry.Wow.ClientCVar> Cvars {
      get { return cvars_; }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 3;
    private readonly static uint PageDefaultValue = 0;

    private uint page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Page {
      get { if ((_hasBits0 & 1) != 0) { return page_; } else { return PageDefaultValue; } }
      set {
        _hasBits0 |= 1;
        page_ = value;
      }
    }
    /// <summary>Gets whether the "page" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPage {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "page" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPage() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lastPage" field.</summary>
    public const int LastPageFieldNumber = 4;
    private readonly static bool LastPageDefaultValue = false;

    private bool lastPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LastPage {
      get { if ((_hasBits0 & 2) != 0) { return lastPage_; } else { return LastPageDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lastPage_ = value;
      }
    }
    /// <summary>Gets whether the "lastPage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastPage {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lastPage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastPage() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CVarsFromClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CVarsFromClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CharacterIdentity, other.CharacterIdentity)) return false;
      if(!cvars_.Equals(other.cvars_)) return false;
      if (Page != other.Page) return false;
      if (LastPage != other.LastPage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (characterIdentity_ != null) hash ^= CharacterIdentity.GetHashCode();
      hash ^= cvars_.GetHashCode();
      if (HasPage) hash ^= Page.GetHashCode();
      if (HasLastPage) hash ^= LastPage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (characterIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CharacterIdentity);
      }
      cvars_.WriteTo(output, _repeated_cvars_codec);
      if (HasPage) {
        output.WriteRawTag(24);
        output.WriteUInt32(Page);
      }
      if (HasLastPage) {
        output.WriteRawTag(32);
        output.WriteBool(LastPage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (characterIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CharacterIdentity);
      }
      cvars_.WriteTo(ref output, _repeated_cvars_codec);
      if (HasPage) {
        output.WriteRawTag(24);
        output.WriteUInt32(Page);
      }
      if (HasLastPage) {
        output.WriteRawTag(32);
        output.WriteBool(LastPage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (characterIdentity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharacterIdentity);
      }
      size += cvars_.CalculateSize(_repeated_cvars_codec);
      if (HasPage) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
      }
      if (HasLastPage) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CVarsFromClient other) {
      if (other == null) {
        return;
      }
      if (other.characterIdentity_ != null) {
        if (characterIdentity_ == null) {
          CharacterIdentity = new global::Blizzard.Telemetry.Wow.CharacterIdentity();
        }
        CharacterIdentity.MergeFrom(other.CharacterIdentity);
      }
      cvars_.Add(other.cvars_);
      if (other.HasPage) {
        Page = other.Page;
      }
      if (other.HasLastPage) {
        LastPage = other.LastPage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (characterIdentity_ == null) {
              CharacterIdentity = new global::Blizzard.Telemetry.Wow.CharacterIdentity();
            }
            input.ReadMessage(CharacterIdentity);
            break;
          }
          case 18: {
            cvars_.AddEntriesFrom(input, _repeated_cvars_codec);
            break;
          }
          case 24: {
            Page = input.ReadUInt32();
            break;
          }
          case 32: {
            LastPage = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (characterIdentity_ == null) {
              CharacterIdentity = new global::Blizzard.Telemetry.Wow.CharacterIdentity();
            }
            input.ReadMessage(CharacterIdentity);
            break;
          }
          case 18: {
            cvars_.AddEntriesFrom(ref input, _repeated_cvars_codec);
            break;
          }
          case 24: {
            Page = input.ReadUInt32();
            break;
          }
          case 32: {
            LastPage = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AddOnsFromClient : pb::IMessage<AddOnsFromClient>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AddOnsFromClient> _parser = new pb::MessageParser<AddOnsFromClient>(() => new AddOnsFromClient());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AddOnsFromClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Blizzard.Telemetry.Wow.Client.ClientSharedReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AddOnsFromClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AddOnsFromClient(AddOnsFromClient other) : this() {
      _hasBits0 = other._hasBits0;
      characterIdentity_ = other.characterIdentity_ != null ? other.characterIdentity_.Clone() : null;
      addons_ = other.addons_.Clone();
      page_ = other.page_;
      lastPage_ = other.lastPage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AddOnsFromClient Clone() {
      return new AddOnsFromClient(this);
    }

    /// <summary>Field number for the "character_identity" field.</summary>
    public const int CharacterIdentityFieldNumber = 1;
    private global::Blizzard.Telemetry.Wow.CharacterIdentity characterIdentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Blizzard.Telemetry.Wow.CharacterIdentity CharacterIdentity {
      get { return characterIdentity_; }
      set {
        characterIdentity_ = value;
      }
    }

    /// <summary>Field number for the "addons" field.</summary>
    public const int AddonsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Blizzard.Telemetry.Wow.ClientAddOn> _repeated_addons_codec
        = pb::FieldCodec.ForMessage(18, global::Blizzard.Telemetry.Wow.ClientAddOn.Parser);
    private readonly pbc::RepeatedField<global::Blizzard.Telemetry.Wow.ClientAddOn> addons_ = new pbc::RepeatedField<global::Blizzard.Telemetry.Wow.ClientAddOn>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Blizzard.Telemetry.Wow.ClientAddOn> Addons {
      get { return addons_; }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 3;
    private readonly static uint PageDefaultValue = 0;

    private uint page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Page {
      get { if ((_hasBits0 & 1) != 0) { return page_; } else { return PageDefaultValue; } }
      set {
        _hasBits0 |= 1;
        page_ = value;
      }
    }
    /// <summary>Gets whether the "page" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPage {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "page" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPage() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lastPage" field.</summary>
    public const int LastPageFieldNumber = 4;
    private readonly static bool LastPageDefaultValue = false;

    private bool lastPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LastPage {
      get { if ((_hasBits0 & 2) != 0) { return lastPage_; } else { return LastPageDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lastPage_ = value;
      }
    }
    /// <summary>Gets whether the "lastPage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastPage {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "lastPage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastPage() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AddOnsFromClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AddOnsFromClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CharacterIdentity, other.CharacterIdentity)) return false;
      if(!addons_.Equals(other.addons_)) return false;
      if (Page != other.Page) return false;
      if (LastPage != other.LastPage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (characterIdentity_ != null) hash ^= CharacterIdentity.GetHashCode();
      hash ^= addons_.GetHashCode();
      if (HasPage) hash ^= Page.GetHashCode();
      if (HasLastPage) hash ^= LastPage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (characterIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CharacterIdentity);
      }
      addons_.WriteTo(output, _repeated_addons_codec);
      if (HasPage) {
        output.WriteRawTag(24);
        output.WriteUInt32(Page);
      }
      if (HasLastPage) {
        output.WriteRawTag(32);
        output.WriteBool(LastPage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (characterIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CharacterIdentity);
      }
      addons_.WriteTo(ref output, _repeated_addons_codec);
      if (HasPage) {
        output.WriteRawTag(24);
        output.WriteUInt32(Page);
      }
      if (HasLastPage) {
        output.WriteRawTag(32);
        output.WriteBool(LastPage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (characterIdentity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharacterIdentity);
      }
      size += addons_.CalculateSize(_repeated_addons_codec);
      if (HasPage) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
      }
      if (HasLastPage) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AddOnsFromClient other) {
      if (other == null) {
        return;
      }
      if (other.characterIdentity_ != null) {
        if (characterIdentity_ == null) {
          CharacterIdentity = new global::Blizzard.Telemetry.Wow.CharacterIdentity();
        }
        CharacterIdentity.MergeFrom(other.CharacterIdentity);
      }
      addons_.Add(other.addons_);
      if (other.HasPage) {
        Page = other.Page;
      }
      if (other.HasLastPage) {
        LastPage = other.LastPage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (characterIdentity_ == null) {
              CharacterIdentity = new global::Blizzard.Telemetry.Wow.CharacterIdentity();
            }
            input.ReadMessage(CharacterIdentity);
            break;
          }
          case 18: {
            addons_.AddEntriesFrom(input, _repeated_addons_codec);
            break;
          }
          case 24: {
            Page = input.ReadUInt32();
            break;
          }
          case 32: {
            LastPage = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (characterIdentity_ == null) {
              CharacterIdentity = new global::Blizzard.Telemetry.Wow.CharacterIdentity();
            }
            input.ReadMessage(CharacterIdentity);
            break;
          }
          case 18: {
            addons_.AddEntriesFrom(ref input, _repeated_addons_codec);
            break;
          }
          case 24: {
            Page = input.ReadUInt32();
            break;
          }
          case 32: {
            LastPage = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
